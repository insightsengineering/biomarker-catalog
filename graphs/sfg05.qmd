---
title: SFG5
subtitle: Survival Forest Graphs Comparing on Subgroups
---

------------------------------------------------------------------------

::: panel-tabset
## Setup

We prepare the data similarly as in [SFG1](../graphs/sfg01.qmd).

```{r, message = FALSE}
library(tern)
library(dplyr)

AGE_probs <- c(0.5)

adtte <- scda::synthetic_cdisc_data("rcd_2022_06_27")$adtte %>%
  df_explicit_na() %>%
  filter(
    PARAMCD == "OS"
  ) %>%
  mutate(
    AVAL = day2month(AVAL),
    AVALU = "Months",
    is_event = CNSR == 0,
    ARM_BIN = fct_collapse_only(
      ARM,
      CTRL = c("B: Placebo"),
      TRT = c("A: Drug X", "C: Combination")
    ),
    AGE_BIN = cut_quantile_bins(AGE, probs = AGE_probs),
    BMRKR2 = fct_explicit_na_if(BMRKR2, BEP01FL == "N"),
    BMRKR2_BIN = fct_collapse_only(
      BMRKR2,
      High = c("HIGH"),
      Low = c("MEDIUM", "LOW")
    )
  ) %>%
  var_relabel(
    BEP01FL = "BEP",
    BMRKR2_BIN = "Biomarker (Binary)"
  )
```

## Standard Plot

We create a `tables_all()` helper function first which creates a subtable with resulting statistics as e.g. in [SFG1](../graphs/sfg01.qmd) for each subgroup of interest.

```{r}
tables_all <- function(filter_var, filter_condition, sub_var) {
  dataset <- adtte %>%
    filter(!!as.name(filter_var) == filter_condition)
  if (nrow(dataset) == 0) {
    stop(paste("Subset", filter_var, "==", filter_condition, "is empty"))
  }
  tbl <- extract_survival_subgroups(
    variables = list(
      tte = "AVAL",
      is_event = "is_event",
      arm = "ARM_BIN",
      subgroups = sub_var
    ),
    label_all = "ITT",
    data = dataset
  )
  basic_table() %>%
    tabulate_survival_subgroups(
      df = tbl,
      vars = c("n_tot_events", "n", "n_events", "median", "hr", "ci"),
      time_unit = dataset$AVALU[1]
    )
}
```

Then we can call this helper function on the subsets we are interested in and have prepared in the above data setup chunk.
Note that e.g. the levels for `AGE_BIN` mentioned in the `filter_condition` argument need to be aligned with the `AGE_probs` cutoff(s) specified above.
Otherwise the subset might be empty and an according error message is shown.

```{r}
tables_list <- list(
  tables_all(filter_var = "SEX", filter_condition = "F", sub_var = "BEP01FL"),
  tables_all(filter_var = "SEX", filter_condition = "M", sub_var = "BEP01FL"),
  tables_all(filter_var = "AGE_BIN", filter_condition = "[0%,50%]", sub_var = "BEP01FL"),
  tables_all(filter_var = "AGE_BIN", filter_condition = "(50%,100%]", sub_var = "BEP01FL")
)
```

We can then add subtitles for each subtable, `rbind()` them together and produce the forest plot using the `g_forest()` function.
Similarly as in [SFG3](../graphs/sfg03.qmd) we need to specify the `col_x`, `col_y` and `forest_header` arguments for `g_forest()` by recovering them from one of the original tables.

For adding subtitles we use a small helper function:

```{r}
add_subtitle <- function(sub_tab, sub_title) {
  label_at_path(sub_tab, path = row_paths(sub_tab)[[1]][1]) <- sub_title
  sub_tab
}
```

So we can use this now:

```{r, fig.width = 15, fig.height = 7}
one_table <- tables_list[[1]]
result <- rbind(
  add_subtitle(tables_list[[1]], "SEX = F"),
  add_subtitle(tables_list[[2]], "SEX = M"),
  add_subtitle(tables_list[[3]], "AGE_BIN = [0%,50%]"),
  add_subtitle(tables_list[[4]], "AGE_BIN = (50%,100%]")
)
g_forest(
  result,
  col_x = attr(one_table, "col_x"),
  col_ci = attr(one_table, "col_ci"),
  forest_header = attr(one_table, "forest_header"),
  col_symbol_size = attr(one_table, "col_symbol_size")
)
```

## Survival Forest Graph Comparing Categorical Biomarker Groups on Subgroups (SFG5A)

The main difference here is that we ensure that `col_info` is aligned across all subtables before using `rbind()` to combine subtables.
(Generally this is worth trying out if the `rbind()` does not work out of the box to combine subtables.)

```{r}
tables_list <- list(
  tables_all(filter_var = "BMRKR2_BIN", filter_condition = "High", sub_var = "SEX"),
  tables_all(filter_var = "BMRKR2_BIN", filter_condition = "Low", sub_var = "SEX"),
  tables_all(filter_var = "BMRKR2_BIN", filter_condition = "High", sub_var = "AGE_BIN"),
  tables_all(filter_var = "BMRKR2_BIN", filter_condition = "Low", sub_var = "AGE_BIN")
)
col_info(tables_list[[2]]) <- col_info(tables_list[[1]])
result <- rbind(
  add_subtitle(tables_list[[1]], "BMRKR2_BIN = High"),
  add_subtitle(tables_list[[2]], "BMRKR2_BIN = Low"),
  add_subtitle(tables_list[[3]], "BMRKR2_BIN = High"),
  add_subtitle(tables_list[[4]], "BMRKR2_BIN = Low")
)
```

We can now produce the forest plot using the `g_forest()` function.

```{r, fig.width = 15, fig.height = 7}
one_table <- tables_list[[1]]
g_forest(
  result,
  col_x = attr(one_table, "col_x"),
  col_ci = attr(one_table, "col_ci"),
  forest_header = attr(one_table, "forest_header"),
  col_symbol_size = attr(one_table, "col_symbol_size")
)
```

## Survival Forest Graph Comparing Categorical Biomarker Groups on Subgroups, including ITT (SFG5B)

We use the same `tables_all()` function above and combine all subtables using `rbind()` to tabulate statistics to be able to use as an input for forest plot.

```{r}
tables_list <- list(
  tables_all(filter_var = "SEX", filter_condition = "F", sub_var = c("BEP01FL", "BMRKR2_BIN")),
  tables_all(filter_var = "SEX", filter_condition = "M", sub_var = c("BEP01FL", "BMRKR2_BIN")),
  tables_all(filter_var = "AGE_BIN", filter_condition = "[0%,50%]", sub_var = c("BEP01FL", "BMRKR2_BIN")),
  tables_all(filter_var = "AGE_BIN", filter_condition = "(50%,100%]", sub_var = c("BEP01FL", "BMRKR2_BIN"))
)
```

We can now produce the forest plot using the `g_forest()` function.

```{r, fig.width = 15, fig.height = 10}
one_table <- tables_list[[1]]
result <- rbind(
  add_subtitle(tables_list[[1]], "SEX = F"),
  add_subtitle(tables_list[[2]], "SEX = M"),
  add_subtitle(tables_list[[3]], "AGE_BIN = [0%,50%]"),
  add_subtitle(tables_list[[4]], "AGE_BIN = (50%,100%]")
)
g_forest(
  result,
  col_x = attr(one_table, "col_x"),
  col_ci = attr(one_table, "col_ci"),
  forest_header = attr(one_table, "forest_header"),
  col_symbol_size = attr(one_table, "col_symbol_size")
)
```

## Survival Forest Graph for Subgroups Defined by Multiple Bins of Continuous Variable (SFG5C)

First, we derive a new variable `AGE_BIN2` with three bins for age, in a similar way as we derived `AGE_BIN` above.
We then use the same `tables_all()` function above and combine all subtables using `rbind()` to tabulate statistics to be able to use as an input for forest plot.

```{r, message = FALSE}
AGE_probs2 <- c(0.33, 0.66)

adtte <- adtte %>%
  mutate(AGE_BIN2 = cut_quantile_bins(AGE, probs = AGE_probs2))
tables_list <- list(
  tables_all(filter_var = "AGE_BIN2", filter_condition = "[0%,33%]", sub_var = "BMRKR2_BIN"),
  tables_all(filter_var = "AGE_BIN2", filter_condition = "(33%,66%]", sub_var = "BMRKR2_BIN"),
  tables_all(filter_var = "AGE_BIN2", filter_condition = "(66%,100%]", sub_var = "BMRKR2_BIN")
)
```

We can now produce the forest plot using the `g_forest()` function.

```{r, fig.width = 15, fig.height = 6}
one_table <- tables_list[[1]]
result <- rbind(
  add_subtitle(tables_list[[1]], "AGE_BIN2 = [0%,33%]"),
  add_subtitle(tables_list[[2]], "AGE_BIN2 = (33%,66%]"),
  add_subtitle(tables_list[[3]], "AGE_BIN = (66%,100%]")
)
g_forest(
  result,
  col_x = attr(one_table, "col_x"),
  col_ci = attr(one_table, "col_ci"),
  forest_header = attr(one_table, "forest_header"),
  col_symbol_size = attr(one_table, "col_symbol_size")
)
```

{{< include ../session_info.qmd >}}
:::
