[
  {
    "objectID": "NEWS.html",
    "href": "NEWS.html",
    "title": "",
    "section": "",
    "text": "biomarker.catalog 0.1.9.9000\n\nNew Features\n\nPublished the Biomarker Analysis Catalog."
  },
  {
    "objectID": "session_info.html#session-info",
    "href": "session_info.html#session-info",
    "title": "",
    "section": "Session Info",
    "text": "Session Info\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.2.2    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.2.2       htmltools_0.5.5   yaml_2.3.7        rmarkdown_2.21   \n [9] knitr_1.42        jsonlite_1.8.4    xfun_0.39         digest_0.6.31    \n[13] rlang_1.1.1       evaluate_0.21"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Introduction\nThis is a collection of Biomarker Analysis templates including tables and graphs."
  },
  {
    "objectID": "graphs/ag01.html",
    "href": "graphs/ag01.html",
    "title": "AG1",
    "section": "",
    "text": "Purpose\nSetup\nTitle, Axis and Caption Labels\nCoordinates\nThemes\nScales\nFaceting\nTitles, Footnotes, and Page Numbers\nSession Info\n\n\n\nIn this page we collect standard utilities for plotting which can be applied in principle to all graphs. Then we don’t need to repeat explaining these in each of the other graph pages. So it is kind of a cheat sheet for ggplot2. General introductions to ggplot2 and a pdf cheatsheet are also recommended and linked at https://ggplot2.tidyverse.org/.\n\n\nWe start by creating a graph. Note that we load our ggplot2.utils NEST package instead of ggplot2 so we benefit from additional utilities selected from the ggplot2 extension package ecosystem. Note that ggplot2.utils automatically loads also ggplot2, there we do not need to do that manually.\nWe also typically apply the df_explicit_na() function to the incoming dataset to convert character to factor variables, and code missing values as an explicit factor level, which avoids downstream problems.\nNote that you may still run into warning messages after producing some of the graphs if a continuous variable you want to analyze contains NAs. To avoid these warning messages, you can use the drop_na() function from tidyr in the data manipulation step below to remove the rows containing NAs for the specific numeric column (e.g. drop_na(BMRKR1) to remove rows where BMRKR1 is missing).\n\nCodelibrary(tern)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2.utils)\n\nadsl &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adsl %&gt;%\n  df_explicit_na() %&gt;%\n  drop_na(BMRKR1)\n\ngraph &lt;- ggplot(adsl, aes(BMRKR1)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30) +\n  geom_density(aes(y = after_stat(density)))\n\ngraph\n\n\n\n\nAnother possibility is to add na.rm = TRUE option to the ggplot() arguments, or alternatively select() the relevant variables and then delete any rows with missing values by na.omit() and finally pipe that to ggplot().\n\nCodeggplot(adsl, aes(BMRKR1), na.rm = TRUE) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30) +\n  geom_density(aes(y = after_stat(density)))\n\n\n\nCodeadsl %&gt;%\n  select(BMRKR1) %&gt;%\n  na.omit() %&gt;%\n  ggplot(aes(BMRKR1)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30) +\n  geom_density(aes(y = after_stat(density)))\n\n\n\n\n\n\nTitle, subtitle, axis as well as caption labels can be added with the labs() layer. Alternatively specific tern functions can be used, see [Titles and Footnotes] below.\n\nCodegraph + labs(\n  x = \"Baseline Biomarker\",\n  y = \"Density\",\n  title = \"Distribution of the Baseline Biomarker\",\n  subtitle = \"Histogram and Density Plot\",\n  caption = \"Note: No outliers have been removed here.\"\n)\n\n\n\n\n\n\nWe can change the coordinate system with coord_*() layers, e.g. to rotate the plot.\n\nCodegraph + coord_flip()\n\n\n\n\nWe can set the limits of the coordinate axes with coord_cartesian(). This performs a real zoom into the plot, instead of just replacing outside values with NA as xlim() or lims() are doing it. It is therefore preferred.\n\nCodegraph +\n  coord_cartesian(xlim = c(0, 15), ylim = c(0, 0.3)) +\n  labs(caption = \"Note: biomarker values greater than 15 are not shown on this plot.\")\n\n\n\n\n\n\nGeneral plot theme can be specified with theme_*() functions. The default theme is theme_gray(). For example in publications other themes might be preferred, such as theme_classic().\n\nCodegraph + theme_classic()\n\n\n\n\n\n\nMany different scales mapping data values to visual values of an aesthetic are available in scale_*() functions.\nWe can change the location scale easily, for example to show x on a log scale:\n\nCodegraph + scale_x_log10()\n\n\n\n\n\n\nFaceting is an elegant approach to create the same graph separately for each of the levels of one or multiple other factors. It can just be added as an additional layer to the existing graph. For example, we can show the distribution of the biomarker for each of the gender levels.\n\nCodegraph + facet_grid(~SEX)\n\n\n\n\n\n\nNEST provides a function to add titles, footnotes, and page numbers to grob objects (read: graphical objects) with tern::decorate_grob().\nFirst, we need to prepare the pieces: graph, titles/footnotes. A ggplot object must be converted to a grob. We can use ggplot::ggplotGrob() to accomplish this easily.\nTitles and footnotes can be defined as vectors where each element is a new line. Tip: The paste() function can be helpful to split long sentences across multiple lines.\n\nCodegrob_graph &lt;- ggplotGrob(graph)\n\ntitles &lt;- c(\n  \"Distribution of the Baseline Biomarker 1\",\n  \"Biomarker Evaluable Patients\",\n  \"Protocol: AB12345 (Data Cut: 01 JAN 2021)\"\n)\n\nfootnotes &lt;- c(\n  \"Biomarker 1 = Gene ABC\",\n  \"Data Cut-off: 01 JAN 2021; RAVE Data Extracted: 15 JAN 2021\",\n  \"Program: biomark1_analysis.R\"\n)\n\n\nNow that the pieces are ready, we can put them together. The grid package allows us to manipulate grobs. Using grid::grid.draw() we can apply tern::decorate_grob() to our object, thus adding the titles/footnotes.\n\nCodelibrary(grid)\n\ngrid.newpage()\ngrid.draw(\n  decorate_grob(\n    grob = grob_graph,\n    titles = titles,\n    footnotes = footnotes,\n    page = \"Page 6 of 129\"\n  )\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] ggplot2.utils_0.2.1   ggplot2_3.4.2         dplyr_1.1.2          \n[4] tidyr_1.3.0           tern_0.8.1.9012       rtables_0.6.0.9004   \n[7] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      labeling_0.4.2     knitr_1.42         GGally_2.1.2      \n[29] forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4       \n[33] broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1     \n[37] scales_1.2.1       backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4    \n[41] farver_2.1.1       digest_0.6.31      rbibutils_2.2.13   Rdpack_2.4        \n[45] cli_3.6.1          tools_4.2.2        tibble_3.2.1       pkgconfig_2.0.3   \n[49] MASS_7.3-60        Matrix_1.5-4       rmarkdown_2.21     reshape_0.8.9     \n[53] R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/rfg02.html",
    "href": "graphs/rfg02.html",
    "title": "RFG2",
    "section": "",
    "text": "Setup\nResponse Forest Graph for Multiple Continuous Biomarkers (RFG2A)\nResponse Forest Graph for Multiple Continuous Biomarkers by Manual Subgroup Categories (RFG2B)\nResponse Forest Graph for Multiple Continuous Biomarkers with Stratification (RFG2C)\nSession Info\n\n\n\nThese templates are helpful when we are interested in modelling the effects of continuous biomarker variables on the binary response outcome, conditional on covariates and/or stratification variables included in (conditional) logistic regression models. We would like to assess how the estimates effects change when we look at different subgroups.\nIn detail the differences to RFG1 are the following:\n\nThe extract_rsp_subgroups() and tabulate_rsp_subgroups() functions used in RFG1 evaluate the treatment effects from two arms, across subgroups. On the other hand, the extract_rsp_biomarkers() and tabulate_rsp_biomarkers() functions used here in RFG2 evaluate the effects from continuous biomarkers on the probability for response.\nThe extract_rsp_subgroups() and tabulate_rsp_subgroups() functions only allow specification of a single treatment arm variable, while the extract_rsp_biomarkers() and tabulate_rsp_biomarkers() allow to look at multiple continuous biomarker variables at once.\nIn addition to the treatment arms, the use of extract_rsp_subgroups() and tabulate_rsp_subgroups() functions can be extended to other binary variables. For example, we could define the binarized ARM variable as AGE&gt;=65 vs. AGE&lt;65 and then look at the odds ratios across subgroups. For the extract_rsp_biomarkers() and tabulate_rsp_biomarkers() functions, we could use the original continuous biomarker variable AGE, and then look at the estimated effect across subgroups.\n\nSimilarly like in RFG1, we will use the synthetic_cdisc_data$adrs data set from the scda package. Here we just filter for the Best Confirmed Overall Response by Investigator and patients with measurable disease at baseline, and define a new variable COMPRESP to include complete responses only.\n\nCodelibrary(tern)\nlibrary(dplyr)\nlibrary(hermes)\n\nadrs &lt;- scda::synthetic_cdisc_data(\"latest\")$adrs\n\nadrs_f &lt;- adrs %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"BESRSPI\", BMEASIFL == \"Y\") %&gt;%\n  mutate(COMPRESP = (AVALC == \"CR\"))\n\n\n\n\nHere we specify that we would like to analyze the two continuous biomarkers BMRKR1 and AGE, conditional on the covariate SEX, in the subgroups defined by the levels of BMRKR2.\n\nCodedf &lt;- extract_rsp_biomarkers(\n  variables = list(\n    rsp = \"COMPRESP\",\n    biomarkers = c(\"BMRKR1\", \"AGE\"),\n    covariates = \"SEX\",\n    subgroups = \"BMRKR2\"\n  ),\n  data = adrs_f\n)\n\nresult &lt;- tabulate_rsp_biomarkers(df, vars = c(\"n_tot\", \"n_rsp\", \"prop\", \"or\", \"ci\"))\n\n\nWe can look at the result in the console already.\n\nCoderesult\n\n                                  Total n   Responders   Response (%)   Odds Ratio      95% CI   \n—————————————————————————————————————————————————————————————————————————————————————————————————\nAge                                                                                              \n  All Patients                      203        165          81.3%          1.01      (0.96, 1.06)\n  Categorical Level Biomarker 2                                                                  \n    LOW                             74          64          86.5%          1.07      (0.96, 1.18)\n    MEDIUM                          65          49          75.4%          1.04      (0.95, 1.15)\n    HIGH                            64          52          81.2%          0.92      (0.84, 1.01)\nContinuous Level Biomarker 1                                                                     \n  All Patients                      203        165          81.3%          1.02      (0.91, 1.14)\n  Categorical Level Biomarker 2                                                                  \n    LOW                             74          64          86.5%          1.05      (0.83, 1.33)\n    MEDIUM                          65          49          75.4%          1.00      (0.85, 1.18)\n    HIGH                            64          52          81.2%          1.05      (0.84, 1.31)\n\n\nNote that in addition to the Categorical Level Biomarker 2 subgroups we automatically also get the estimates for the overall patient population.\nWe can then produce the final forest plot using the g_forest() function on this tabular result.\n\nCodeg_forest(result, xlim = c(0.7, 1.4))\n\n\n\n\n\n\nIt is also possible to join and select subgroup categories manually using the groups_lists argument, as follows.\n\nCodedf &lt;- extract_rsp_biomarkers(\n  variables = list(\n    rsp = \"COMPRESP\",\n    biomarkers = c(\"BMRKR1\", \"AGE\"),\n    covariates = \"SEX\",\n    subgroups = \"BMRKR2\"\n  ),\n  data = adrs_f,\n  groups_list = list(\n    BMRKR2 = list(\n      one = c(\"LOW\", \"MEDIUM\"),\n      two = \"HIGH\"\n    )\n  )\n)\n\nresult &lt;- tabulate_rsp_biomarkers(df, vars = c(\"n_tot\", \"n_rsp\", \"prop\", \"or\", \"ci\"))\ng_forest(result, xlim = c(0.7, 1.4))\n\n\n\n\n\n\nFinally we can also specify stratification variables with the strat variable element, which leads to the use of conditional logistic regression models.\n\nCodedf &lt;- extract_rsp_biomarkers(\n  variables = list(\n    rsp = \"COMPRESP\",\n    biomarkers = c(\"BMRKR1\", \"AGE\"),\n    covariates = \"SEX\",\n    subgroups = \"BMRKR2\",\n    strat = c(\"STRATA1\", \"STRATA2\")\n  ),\n  data = adrs_f\n)\n\nresult &lt;- tabulate_rsp_biomarkers(df, vars = c(\"n_tot\", \"n_rsp\", \"prop\", \"or\", \"ci\"))\ng_forest(result, xlim = c(0.7, 1.4))\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] hermes_1.0.1.9011           SummarizedExperiment_1.28.0\n [3] Biobase_2.58.0              GenomicRanges_1.50.2       \n [5] GenomeInfoDb_1.34.9         IRanges_2.32.0             \n [7] S4Vectors_0.36.2            BiocGenerics_0.44.0        \n [9] MatrixGenerics_1.10.0       matrixStats_0.63.0         \n[11] ggfortify_0.4.16            ggplot2_3.4.2              \n[13] dplyr_1.1.2                 tern_0.8.1.9012            \n[15] rtables_0.6.0.9004          magrittr_2.0.3             \n[17] formatters_0.4.1.9003      \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7                bit64_4.0.5                \n [3] filelock_1.0.2              progress_1.2.2             \n [5] httr_1.4.5                  doParallel_1.0.17          \n [7] RColorBrewer_1.1-3          tools_4.2.2                \n [9] backports_1.4.1             utf8_1.2.3                 \n[11] R6_2.5.1                    DBI_1.1.3                  \n[13] colorspace_2.1-0            GetoptLong_1.0.5           \n[15] withr_2.5.0                 prettyunits_1.1.1          \n[17] tidyselect_1.2.0            gridExtra_2.3              \n[19] curl_5.0.0                  bit_4.0.5                  \n[21] compiler_4.2.2              cli_3.6.1                  \n[23] xml2_1.3.4                  DelayedArray_0.24.0        \n[25] scales_1.2.1                checkmate_2.2.0            \n[27] rappdirs_0.3.3              stringr_1.5.0              \n[29] digest_0.6.31               rmarkdown_2.21             \n[31] XVector_0.38.0              pkgconfig_2.0.3            \n[33] htmltools_0.5.5             dbplyr_2.3.2               \n[35] fastmap_1.1.1               htmlwidgets_1.6.2          \n[37] rlang_1.1.1                 GlobalOptions_0.1.2        \n[39] RSQLite_2.3.1               shape_1.4.6                \n[41] generics_0.1.3              jsonlite_1.8.4             \n[43] RCurl_1.98-1.12             GenomeInfoDbData_1.2.9     \n[45] Matrix_1.5-4                Rcpp_1.0.10                \n[47] munsell_0.5.0               fansi_1.0.4                \n[49] lifecycle_1.0.3             stringi_1.7.12             \n[51] yaml_2.3.7                  zlibbioc_1.44.0            \n[53] BiocFileCache_2.6.1         blob_1.2.4                 \n[55] grid_4.2.2                  parallel_4.2.2             \n[57] ggrepel_0.9.3               forcats_1.0.0              \n[59] crayon_1.5.2                lattice_0.21-8             \n[61] Biostrings_2.66.0           splines_4.2.2              \n[63] hms_1.1.3                   KEGGREST_1.38.0            \n[65] circlize_0.4.15             knitr_1.42                 \n[67] ComplexHeatmap_2.14.0       pillar_1.9.0               \n[69] rjson_0.2.21                codetools_0.2-19           \n[71] biomaRt_2.54.1              XML_3.99-0.14              \n[73] glue_1.6.2                  evaluate_0.21              \n[75] MultiAssayExperiment_1.24.0 png_0.1-8                  \n[77] vctrs_0.6.2                 Rdpack_2.4                 \n[79] foreach_1.5.2               gtable_0.3.3               \n[81] purrr_1.0.1                 tidyr_1.3.0                \n[83] clue_0.3-64                 assertthat_0.2.1           \n[85] cachem_1.0.8                xfun_0.39                  \n[87] scda_0.1.6.9000             rbibutils_2.2.13           \n[89] broom_1.0.4                 survival_3.5-5             \n[91] tibble_3.2.1                iterators_1.0.14           \n[93] memoise_2.0.1               AnnotationDbi_1.60.2       \n[95] cluster_2.1.4"
  },
  {
    "objectID": "graphs/kg04.html",
    "href": "graphs/kg04.html",
    "title": "KG4",
    "section": "",
    "text": "Setup\nStandard Plot\nChange Color and Line Type in Kaplan-Meier Graph by Treatment Arm and Biomarker Subgroups (KG4A)\nReorder and Rename Treatment Arms or Biomarker Groups in Kaplan-Meier Graph by Treatment Arm and Biomarker Subgroups (KG4B)\nSession Info\n\n\n\nA setup similar to KG1 is used, with some additional data manipulation steps to first binarize the continuous biomarker and the treatment arm variables, and then combine both into a new interaction variable ARM_BMRKR2. Since we are using biomarker information, we filter on the biomarker evaluable population using the flag variable BEP01FL.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\" & BEP01FL == \"Y\") %&gt;%\n  mutate(\n    is_event = CNSR == 0,\n    BMRKR2_BIN = fct_collapse_only(\n      BMRKR2,\n      High = c(\"HIGH\"),\n      Low = c(\"MEDIUM\", \"LOW\")\n    ),\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    ARM_BMRKR2 = interaction(ARM_BIN, BMRKR2_BIN)\n  )\n\nvariables &lt;- list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARM_BMRKR2\")\n\n\n\n\nWe can produce the basic graph using the g_km() function from tern.\n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = FALSE,\n  col = c(\"red\", \"blue\", \"red\", \"blue\"),\n  lty = c(1, 1, 2, 2)\n)\n\n\n\n\nWe can also choose to annotate the plot with the median survival time for each of the treatment arms using the annot_surv_med = TRUE option.\n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = TRUE,\n  col = c(\"red\", \"blue\", \"red\", \"blue\"),\n  lty = c(1, 1, 2, 2)\n)\n\n\n\n\n\n\nWe can customize the color and line type used in the graph with the col and lty arguments of g_km(). We can first check the level order of the ARM_BMRKR2 factor variable to know which color and line type order we need.\n\nCodelevels(adtte$ARM_BMRKR2)\n\n[1] \"CTRL.High\" \"TRT.High\"  \"CTRL.Low\"  \"TRT.Low\"  \n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = TRUE,\n  col = c(\"green\", \"orange\", \"green\", \"orange\"),\n  lty = c(5, 5, 3, 3)\n)\n\n\n\n\n\n\nFor reordering or renaming we can just modify the levels of the corresponding factors of the treatment arm and biomarker variables, and pass the result to g_km() as before.\n\nCodeadtte_mod &lt;- adtte %&gt;%\n  mutate(\n    ARM_BMRKR2 = fct_collapse_only(\n      ARM_BMRKR2,\n      TRT.Low = \"TRT.Low\",\n      TRT.High = \"TRT.High\",\n      CTRL.Low = \"CTRL.Low\",\n      CTRL.High = \"CTRL.High\"\n    )\n  )\n\ng_km(\n  df = adtte_mod,\n  variables = variables,\n  annot_surv_med = FALSE,\n  col = c(\"red\", \"blue\", \"red\", \"blue\"),\n  lty = c(1, 1, 2, 2)\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2       pillar_1.9.0         forcats_1.0.0       \n [4] tools_4.2.2          digest_0.6.31        lattice_0.21-8      \n [7] jsonlite_1.8.4       evaluate_0.21        lifecycle_1.0.3     \n[10] tibble_3.2.1         gtable_0.3.3         checkmate_2.2.0     \n[13] pkgconfig_2.0.3      rlang_1.1.1          Matrix_1.5-4        \n[16] cli_3.6.1            yaml_2.3.7           xfun_0.39           \n[19] fastmap_1.1.1        gridExtra_2.3        withr_2.5.0         \n[22] knitr_1.42           generics_0.1.3       vctrs_0.6.2         \n[25] htmlwidgets_1.6.2    grid_4.2.2           tidyselect_1.2.0    \n[28] glue_1.6.2           R6_2.5.1             fansi_1.0.4         \n[31] Rdpack_2.4           survival_3.5-5       rmarkdown_2.21      \n[34] scda_0.1.6.9000      farver_2.1.1         nestcolor_0.1.1.9001\n[37] ggplot2_3.4.2        purrr_1.0.1          tidyr_1.3.0         \n[40] codetools_0.2-19     splines_4.2.2        backports_1.4.1     \n[43] scales_1.2.1         htmltools_0.5.5      rbibutils_2.2.13    \n[46] colorspace_2.1-0     labeling_0.4.2       utf8_1.2.3          \n[49] munsell_0.5.0        broom_1.0.4"
  },
  {
    "objectID": "graphs/sfg01.html",
    "href": "graphs/sfg01.html",
    "title": "SFG1",
    "section": "",
    "text": "Setup\nStandard Plot\nSurvival Forest Graph Only by Categorical Biomarker (SFG1A)\nSurvival Forest Graph Only by Binned Continuous Variable (SFG1B)\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adtte data set from the scda package to create the survival forest graph. We start by filtering the adtte data set for the overall survival observations, converting time of overall survival to months, creating a new variable for event information, binarizing the ARM variable and creating a binned age variable by using the function cut_quantile_bins(). Note that we do not include the boundaries 0 and 1 in the corresponding cutoffs vector AGE_probs, but only the true cutoff probabilities to use (here 0.5, i.e. the median). We restrict the analysis of the biomarker variables BMRKR1 and BMRKR2 to the BEP by setting them as missing for the non-BEP.\nWe also relabel the biomarker evaluable population flag variable BEP01FL and the categorical biomarker variable BMRKR2 to update the display label of these variables in the graph.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nAGE_probs &lt;- 0.5\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0,\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = \"B: Placebo\",\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    AGE_BIN = cut_quantile_bins(AGE, probs = AGE_probs),\n    BMRKR1 = ifelse(BEP01FL == \"N\", NA, BMRKR1),\n    BMRKR2 = fct_explicit_na_if(BMRKR2, BEP01FL == \"N\")\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR2 = \"Biomarker (Categorical)\"\n  )\n\n\n\n\nWe use the extract_survival_subgroups() function to calculate the survival forest results for the subgroups defined by the levels of the factor variables given in subgroups. We then tabulate the estimated statistics with the function tabulate_survival_subgroups() to be able to use them as an input for forest plot. Note that for the argument vars we could select different statistics, but the statistics n_tot, hr and ci are required.\n\nCodetbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BEP01FL\", \"BMRKR2\")\n  ),\n  label_all = \"ITT\",\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe can remove the last line showing the &lt;Missing&gt; category from the result table to display the survival forest plot only with non-missing categories for BMRKR2.\n\nCoderesult &lt;- result[-9, , keep_topleft = TRUE]\n\n\nWe can now produce the forest plot using the g_forest() function from tern based on this trimmed result table.\n\nCodeg_forest(result)\n\n\n\n\n\n\nThis works analogously to above, we just only include BMRKR2 in the subgroups list element.\n\nCodetbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = \"BMRKR2\"\n  ),\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe can now remove the first line with All Patients and the last line with the &lt;Missing&gt; category from the result table to display the survival forest plot only by the categorical biomarker BMRKR2.\n\nCoderesult &lt;- result[c(-1, -6), , keep_topleft = TRUE]\n\n\nWe can then again produce the forest plot using g_forest().\n\nCodeg_forest(result)\n\n\n\n\n\n\nAgain we just specify different factor variables in subgroups, here including the binned continuous variable AGE_BIN as well as SEX.\n\nCodetbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"SEX\", \"AGE_BIN\")\n  ),\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe can now produce the forest plot using g_forest().\n\nCodeg_forest(result)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  },
  {
    "objectID": "graphs/kg02.html",
    "href": "graphs/kg02.html",
    "title": "KG2",
    "section": "",
    "text": "Setup\nStandard Plot\nChange Color and Line Type in Kaplan-Meier Plot by Treatment Arm (KG2A)\nSession Info\n\n\n\nThe same setup as in KG1 is used.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\") %&gt;%\n  mutate(is_event = CNSR == 0)\n\nvariables &lt;- list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARM\")\n\n\n\n\nWe can produce the basic plot using the g_km() function from tern.\n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = FALSE\n)\n\n\n\n\nWe can also choose to annotate the plot with the median survival time for each of the treatment arms using the annot_surv_med = TRUE option.\n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = TRUE\n)\n\n\n\n\n\n\nThe line color and line type in the plot can be customized using the col and lty arguments of g_km(), respectively. Note that the order of the levels of the treatment arm factor variable is matched with the order of the colors.\n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = TRUE,\n  col = c(\"purple\", \"orange\", \"red\"),\n  lty = 5\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2       pillar_1.9.0         forcats_1.0.0       \n [4] tools_4.2.2          digest_0.6.31        lattice_0.21-8      \n [7] jsonlite_1.8.4       evaluate_0.21        lifecycle_1.0.3     \n[10] tibble_3.2.1         gtable_0.3.3         checkmate_2.2.0     \n[13] pkgconfig_2.0.3      rlang_1.1.1          Matrix_1.5-4        \n[16] cli_3.6.1            yaml_2.3.7           xfun_0.39           \n[19] fastmap_1.1.1        gridExtra_2.3        withr_2.5.0         \n[22] knitr_1.42           generics_0.1.3       vctrs_0.6.2         \n[25] htmlwidgets_1.6.2    grid_4.2.2           tidyselect_1.2.0    \n[28] glue_1.6.2           R6_2.5.1             fansi_1.0.4         \n[31] Rdpack_2.4           survival_3.5-5       rmarkdown_2.21      \n[34] scda_0.1.6.9000      farver_2.1.1         nestcolor_0.1.1.9001\n[37] ggplot2_3.4.2        purrr_1.0.1          tidyr_1.3.0         \n[40] codetools_0.2-19     splines_4.2.2        backports_1.4.1     \n[43] scales_1.2.1         htmltools_0.5.5      rbibutils_2.2.13    \n[46] colorspace_2.1-0     labeling_0.4.2       utf8_1.2.3          \n[49] munsell_0.5.0        broom_1.0.4"
  },
  {
    "objectID": "graphs/sfg05.html",
    "href": "graphs/sfg05.html",
    "title": "SFG5",
    "section": "",
    "text": "Setup\nStandard Plot\nSurvival Forest Graph Comparing Categorical Biomarker Groups on Subgroups (SFG5A)\nSurvival Forest Graph Comparing Categorical Biomarker Groups on Subgroups, including ITT (SFG5B)\nSurvival Forest Graph for Subgroups Defined by Multiple Bins of Continuous Variable (SFG5C)\nSession Info\n\n\n\nWe prepare the data similarly as in SFG1.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nAGE_probs &lt;- 0.5\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0,\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = \"B: Placebo\",\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    AGE_BIN = cut_quantile_bins(AGE, probs = AGE_probs),\n    BMRKR2 = fct_explicit_na_if(BMRKR2, BEP01FL == \"N\"),\n    BMRKR2_BIN = fct_collapse_only(\n      BMRKR2,\n      High = \"HIGH\",\n      Low = c(\"MEDIUM\", \"LOW\")\n    )\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR2_BIN = \"Biomarker (Binary)\"\n  )\n\n\n\n\nWe create a tables_all() helper function first which creates a subtable with resulting statistics as e.g. in SFG1 for each subgroup of interest.\n\nCodetables_all &lt;- function(filter_var, filter_condition, sub_var) {\n  dataset &lt;- adtte %&gt;%\n    filter(!!as.name(filter_var) == filter_condition)\n  if (nrow(dataset) == 0) {\n    stop(paste(\"Subset\", filter_var, \"==\", filter_condition, \"is empty\"))\n  }\n  tbl &lt;- extract_survival_subgroups(\n    variables = list(\n      tte = \"AVAL\",\n      is_event = \"is_event\",\n      arm = \"ARM_BIN\",\n      subgroups = sub_var\n    ),\n    label_all = \"ITT\",\n    data = dataset\n  )\n  basic_table() %&gt;%\n    tabulate_survival_subgroups(\n      df = tbl,\n      vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n      time_unit = dataset$AVALU[1]\n    )\n}\n\n\nThen we can call this helper function on the subsets we are interested in and have prepared in the above data setup chunk. Note that e.g. the levels for AGE_BIN mentioned in the filter_condition argument need to be aligned with the AGE_probs cutoff(s) specified above. Otherwise the subset might be empty and an according error message is shown.\n\nCodetables_list &lt;- list(\n  tables_all(filter_var = \"SEX\", filter_condition = \"F\", sub_var = \"BEP01FL\"),\n  tables_all(filter_var = \"SEX\", filter_condition = \"M\", sub_var = \"BEP01FL\"),\n  tables_all(filter_var = \"AGE_BIN\", filter_condition = \"[0%,50%]\", sub_var = \"BEP01FL\"),\n  tables_all(filter_var = \"AGE_BIN\", filter_condition = \"(50%,100%]\", sub_var = \"BEP01FL\")\n)\n\n\nWe can then add subtitles for each subtable, rbind() them together and produce the forest plot using the g_forest() function. Similarly as in SFG3 we need to specify the col_x, col_y and forest_header arguments for g_forest() by recovering them from one of the original tables.\nFor adding subtitles we use a small helper function:\n\nCodeadd_subtitle &lt;- function(sub_tab, sub_title) {\n  label_at_path(sub_tab, path = row_paths(sub_tab)[[1]][1]) &lt;- sub_title\n  sub_tab\n}\n\n\nSo we can use this now:\n\nCodeone_table &lt;- tables_list[[1]]\nresult &lt;- rbind(\n  add_subtitle(tables_list[[1]], \"SEX = F\"),\n  add_subtitle(tables_list[[2]], \"SEX = M\"),\n  add_subtitle(tables_list[[3]], \"AGE_BIN = [0%,50%]\"),\n  add_subtitle(tables_list[[4]], \"AGE_BIN = (50%,100%]\")\n)\ng_forest(\n  result,\n  col_x = attr(one_table, \"col_x\"),\n  col_ci = attr(one_table, \"col_ci\"),\n  forest_header = attr(one_table, \"forest_header\"),\n  col_symbol_size = attr(one_table, \"col_symbol_size\")\n)\n\n\n\n\n\n\nThe main difference here is that we ensure that col_info is aligned across all subtables before using rbind() to combine subtables. (Generally this is worth trying out if the rbind() does not work out of the box to combine subtables.)\n\nCodetables_list &lt;- list(\n  tables_all(filter_var = \"BMRKR2_BIN\", filter_condition = \"High\", sub_var = \"SEX\"),\n  tables_all(filter_var = \"BMRKR2_BIN\", filter_condition = \"Low\", sub_var = \"SEX\"),\n  tables_all(filter_var = \"BMRKR2_BIN\", filter_condition = \"High\", sub_var = \"AGE_BIN\"),\n  tables_all(filter_var = \"BMRKR2_BIN\", filter_condition = \"Low\", sub_var = \"AGE_BIN\")\n)\ncol_info(tables_list[[2]]) &lt;- col_info(tables_list[[1]])\nresult &lt;- rbind(\n  add_subtitle(tables_list[[1]], \"BMRKR2_BIN = High\"),\n  add_subtitle(tables_list[[2]], \"BMRKR2_BIN = Low\"),\n  add_subtitle(tables_list[[3]], \"BMRKR2_BIN = High\"),\n  add_subtitle(tables_list[[4]], \"BMRKR2_BIN = Low\")\n)\n\n\nWe can now produce the forest plot using the g_forest() function.\n\nCodeone_table &lt;- tables_list[[1]]\ng_forest(\n  result,\n  col_x = attr(one_table, \"col_x\"),\n  col_ci = attr(one_table, \"col_ci\"),\n  forest_header = attr(one_table, \"forest_header\"),\n  col_symbol_size = attr(one_table, \"col_symbol_size\")\n)\n\n\n\n\n\n\nWe use the same tables_all() function above and combine all subtables using rbind() to tabulate statistics to be able to use as an input for forest plot.\n\nCodetables_list &lt;- list(\n  tables_all(filter_var = \"SEX\", filter_condition = \"F\", sub_var = c(\"BEP01FL\", \"BMRKR2_BIN\")),\n  tables_all(filter_var = \"SEX\", filter_condition = \"M\", sub_var = c(\"BEP01FL\", \"BMRKR2_BIN\")),\n  tables_all(filter_var = \"AGE_BIN\", filter_condition = \"[0%,50%]\", sub_var = c(\"BEP01FL\", \"BMRKR2_BIN\")),\n  tables_all(filter_var = \"AGE_BIN\", filter_condition = \"(50%,100%]\", sub_var = c(\"BEP01FL\", \"BMRKR2_BIN\"))\n)\n\n\nWe can now produce the forest plot using the g_forest() function.\n\nCodeone_table &lt;- tables_list[[1]]\nresult &lt;- rbind(\n  add_subtitle(tables_list[[1]], \"SEX = F\"),\n  add_subtitle(tables_list[[2]], \"SEX = M\"),\n  add_subtitle(tables_list[[3]], \"AGE_BIN = [0%,50%]\"),\n  add_subtitle(tables_list[[4]], \"AGE_BIN = (50%,100%]\")\n)\ng_forest(\n  result,\n  col_x = attr(one_table, \"col_x\"),\n  col_ci = attr(one_table, \"col_ci\"),\n  forest_header = attr(one_table, \"forest_header\"),\n  col_symbol_size = attr(one_table, \"col_symbol_size\")\n)\n\n\n\n\n\n\nFirst, we derive a new variable AGE_BIN2 with three bins for age, in a similar way as we derived AGE_BIN above. We then use the same tables_all() function above and combine all subtables using rbind() to tabulate statistics to be able to use as an input for forest plot.\n\nCodeAGE_probs2 &lt;- c(0.33, 0.66)\n\nadtte &lt;- adtte %&gt;%\n  mutate(AGE_BIN2 = cut_quantile_bins(AGE, probs = AGE_probs2))\ntables_list &lt;- list(\n  tables_all(filter_var = \"AGE_BIN2\", filter_condition = \"[0%,33%]\", sub_var = \"BMRKR2_BIN\"),\n  tables_all(filter_var = \"AGE_BIN2\", filter_condition = \"(33%,66%]\", sub_var = \"BMRKR2_BIN\"),\n  tables_all(filter_var = \"AGE_BIN2\", filter_condition = \"(66%,100%]\", sub_var = \"BMRKR2_BIN\")\n)\n\n\nWe can now produce the forest plot using the g_forest() function.\n\nCodeone_table &lt;- tables_list[[1]]\nresult &lt;- rbind(\n  add_subtitle(tables_list[[1]], \"AGE_BIN2 = [0%,33%]\"),\n  add_subtitle(tables_list[[2]], \"AGE_BIN2 = (33%,66%]\"),\n  add_subtitle(tables_list[[3]], \"AGE_BIN = (66%,100%]\")\n)\ng_forest(\n  result,\n  col_x = attr(one_table, \"col_x\"),\n  col_ci = attr(one_table, \"col_ci\"),\n  forest_header = attr(one_table, \"forest_header\"),\n  col_symbol_size = attr(one_table, \"col_symbol_size\")\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  },
  {
    "objectID": "graphs/sfg04.html",
    "href": "graphs/sfg04.html",
    "title": "SFG4",
    "section": "",
    "text": "Setup\nStandard Plot\nSession Info\n\n\n\nWe prepare the data similarly as in SFG1.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\",\n    BEP01FL == \"Y\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0,\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = \"B: Placebo\",\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    )\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR1 = \"Biomarker (Countinuous)\"\n  )\n\n\n\n\nWe define a vector of all cutpoints to use for a numeric biomarker (here BMRKR1). We lapply() over this vector, each time generating a binary factor variable BMRKR1_cut and then tabulating the resulting statistics similar to SFG3, this time including the treatment arms in the subgroups argument. Then we rbind() all tables in the list together.\n\nCodeall_cutpoints &lt;- c(2.5, 5, 7.5, 10)\n\ntables_all_cutpoints &lt;- lapply(all_cutpoints, function(cutpoint) {\n  adtte_cut &lt;- adtte %&gt;%\n    mutate(\n      BMRKR1_cut = explicit_na(factor(\n        ifelse(BMRKR1 &gt; cutpoint, \"Greater\", \"Less\")\n      ))\n    )\n  tbl &lt;- extract_survival_subgroups(\n    variables = list(\n      tte = \"AVAL\",\n      is_event = \"is_event\",\n      arm = \"BMRKR1_cut\",\n      subgroups = \"ARM_BIN\"\n    ),\n    label_all = paste0(\"BMRKR1 (\", cutpoint, \")\"),\n    data = adtte_cut\n  )\n  basic_table() %&gt;%\n    tabulate_survival_subgroups(\n      df = tbl,\n      vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n      time_unit = adtte_cut$AVALU[1]\n    )\n})\n\nresult &lt;- do.call(rbind, tables_all_cutpoints)\n\n\nWe can now produce the forest plot using the g_forest() function. Similarly as in SFG3 we need to specify the col_x, col_y and forest_header arguments for g_forest() by recovering them from one of the original tables.\n\nCodeone_table &lt;- tables_all_cutpoints[[1]]\ng_forest(\n  result,\n  col_x = attr(one_table, \"col_x\"),\n  col_ci = attr(one_table, \"col_ci\"),\n  forest_header = attr(one_table, \"forest_header\"),\n  col_symbol_size = attr(one_table, \"col_symbol_size\")\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  },
  {
    "objectID": "graphs/kg01.html",
    "href": "graphs/kg01.html",
    "title": "KG1",
    "section": "",
    "text": "Setup\nStandard Plot\nKaplan-Meier Graph for Biomarker Evaluable Population in One Treatment Arm (KG1A)\nKaplan-Meier Graph for Comparing ITT and BEP Populations (KG1B)\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adtte data set from the scda package to create the Kaplan-Meier (KM) plots. We start by filtering the time-to-event dataset for the overall survival observations and by one treatment arm (A), creating a new variable for event information, and curating a list of variables required to produce the plot.\n\nCodelibrary(tern)\nlibrary(dplyr)\nlibrary(grid)\n\nadtte_arm &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\", ARM == \"A: Drug X\") %&gt;%\n  mutate(is_event = CNSR == 0)\n\nvariables &lt;- list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARM\")\n\n\n\n\nWe can produce the basic graph using the g_km() function from tern.\n\nCodeg_km(\n  df = adtte_arm,\n  variables = variables,\n  annot_surv_med = FALSE\n)\n\n\n\n\nWe can also choose to annotate the graph with the median survival time for the overall population using the annot_surv_med = TRUE option.\n\nCodeg_km(\n  df = adtte_arm,\n  variables = variables,\n  annot_surv_med = TRUE\n)\n\n\n\n\n\n\nWe can filter the dataset further for the biomarker evaluable population using the corresponding flag variable, here BEP01FL:\n\nCodeadtte_arm_bep &lt;- adtte_arm %&gt;%\n  filter(BEP01FL == \"Y\")\n\n\nAfterwards we can plot the basic KM graph, just using the further filtered dataset adtte_bep. Here we annotate the plot with median survival time, but could suppress it with annot_surv_med = FALSE.\n\nCodeg_km(\n  df = adtte_arm_bep,\n  variables = variables,\n  annot_surv_med = TRUE\n)\n\n\n\n\n\n\nHere we only filter the time-to-event dataset for the overall survival observations, but keep all treatment arms and the overall population.\n\nCodeadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\") %&gt;%\n  mutate(is_event = CNSR == 0)\n\nvariables &lt;- list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARM\")\n\n\nFirst create a new empty plot, and then setup a grid layout to allow plotting several KM curves on a single graph device. Once the grid layout is defined, plot the ITT (top, with CIs) and BEP (bottom, without CIs) KM graphs. Note that these steps need to executed in the order specified below to enable creation of these plots in one graph.\n\nCodeplot.new()\nlyt &lt;- grid.layout(nrow = 2, ncol = 1) %&gt;%\n  viewport(layout = .) %&gt;%\n  pushViewport()\n\nres &lt;- g_km(\n  df = adtte, variables = variables, newpage = FALSE, annot_surv_med = FALSE,\n  ci_ribbon = TRUE,\n  vp = viewport(layout.pos.row = 1, layout.pos.col = 1)\n)\n\nres &lt;- g_km(\n  df = filter(adtte, BEP01FL == \"Y\"), variables = variables, newpage = FALSE, annot_surv_med = FALSE,\n  vp = viewport(layout.pos.row = 2, layout.pos.col = 1)\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2       pillar_1.9.0         forcats_1.0.0       \n [4] tools_4.2.2          digest_0.6.31        lattice_0.21-8      \n [7] jsonlite_1.8.4       evaluate_0.21        lifecycle_1.0.3     \n[10] tibble_3.2.1         gtable_0.3.3         checkmate_2.2.0     \n[13] pkgconfig_2.0.3      rlang_1.1.1          Matrix_1.5-4        \n[16] cli_3.6.1            yaml_2.3.7           xfun_0.39           \n[19] fastmap_1.1.1        gridExtra_2.3        withr_2.5.0         \n[22] knitr_1.42           generics_0.1.3       vctrs_0.6.2         \n[25] htmlwidgets_1.6.2    tidyselect_1.2.0     glue_1.6.2          \n[28] R6_2.5.1             fansi_1.0.4          Rdpack_2.4          \n[31] survival_3.5-5       rmarkdown_2.21       scda_0.1.6.9000     \n[34] farver_2.1.1         nestcolor_0.1.1.9001 ggplot2_3.4.2       \n[37] purrr_1.0.1          tidyr_1.3.0          codetools_0.2-19    \n[40] splines_4.2.2        backports_1.4.1      scales_1.2.1        \n[43] htmltools_0.5.5      rbibutils_2.2.13     colorspace_2.1-0    \n[46] labeling_0.4.2       utf8_1.2.3           munsell_0.5.0       \n[49] broom_1.0.4"
  },
  {
    "objectID": "graphs/rg02.html",
    "href": "graphs/rg02.html",
    "title": "RG2",
    "section": "",
    "text": "Setup\nStandard Plot\nBinarize Response Outcome for Response Graph by Treatment Arms (RG2A)\nSession Info\n\n\n\nThe same setup as in RG1 is used.\nFor ggplot() used in all analyses, we add by = BMEASIFL in the aesthetics to support the calculation of proportions using geom_text(stat = \"prop\").\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadrs &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adrs %&gt;%\n  df_explicit_na() %&gt;%\n  mutate(AVALC = ordered(AVALC, levels = c(\"&lt;Missing&gt;\", \"NE\", \"PD\", \"SD\", \"PR\", \"CR\"))) %&gt;%\n  filter(PARAMCD == \"BESRSPI\", BMEASIFL == \"Y\")\n\n\n\n\nThe facet_grid() layer from ggplot2 can be used to plot response by treatment arm and the margins argument can be used to produce the (all) column.\n\nCodegraph &lt;- ggplot(adrs, aes(BMEASIFL, fill = AVALC, by = BMEASIFL)) +\n  geom_bar(aes(BMEASIFL), position = \"fill\") +\n  geom_text(stat = \"prop\", position = position_fill(.5)) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab(\"%\") +\n  facet_grid(. ~ ARM, margins = TRUE)\n\ngraph\n\n\n\n\n\n\nWe can use the fct_collapse_only() function from tern to binarize the response variable.\n\nCodeadrs &lt;- adrs %&gt;%\n  mutate(\n    AVALC_BIN = fct_collapse_only(\n      AVALC,\n      Yes = c(\"CR\", \"PR\"),\n      No = c(\"PD\", \"SD\", \"NE\", \"&lt;Missing&gt;\")\n    )\n  )\n\n\nWe can then produce the response plot with the newly binarized response variable.\n\nCodegraph &lt;- ggplot(adrs, aes(BMEASIFL, fill = AVALC_BIN, by = BMEASIFL)) +\n  geom_bar(aes(BMEASIFL), position = \"fill\") +\n  geom_text(stat = \"prop\", position = position_fill(.5)) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab(\"%\") +\n  facet_grid(. ~ ARM, margins = TRUE)\n\ngraph\n\n\n\n\nNote that colors and horizontal plotting is possible as described in RG1B, RG1C.\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] viridisLite_0.4.2  htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3        \n[13] survival_3.5-5     rlang_1.1.1        pillar_1.9.0       glue_1.6.2        \n[17] withr_2.5.0        RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3   \n[21] plyr_1.8.8         munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2 \n[25] codetools_0.2-19   evaluate_0.21      labeling_0.4.2     knitr_1.42        \n[29] GGally_2.1.2       forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1     \n[33] fansi_1.0.4        broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2        \n[37] polynom_1.4-1      scales_1.2.1       backports_1.4.1    checkmate_2.2.0   \n[41] jsonlite_1.8.4     farver_2.1.1       digest_0.6.31      rbibutils_2.2.13  \n[45] grid_4.2.2         Rdpack_2.4         cli_3.6.1          tools_4.2.2       \n[49] tibble_3.2.1       tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60       \n[53] Matrix_1.5-4       rmarkdown_2.21     reshape_0.8.9      R6_2.5.1          \n[57] compiler_4.2.2"
  },
  {
    "objectID": "graphs/dg04.html",
    "href": "graphs/dg04.html",
    "title": "DG4",
    "section": "",
    "text": "Setup\nStandard Plot\nSession Info\n\n\n\nThe graph below plots two continuous (biomarker) variables against each other.\nWe will use the synthetic_cdisc_data$adsl data set from the scda package to illustrate the graph and will select the biomarker evaluable population with BEP01FL. The columns AGE and BMRKR1 contain the biomarker values of interest on a continuous scale.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadsl &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adsl %&gt;%\n  df_explicit_na() %&gt;%\n  filter(BEP01FL == \"Y\")\n\n\n\n\nHere is an example first on the original scale. Note that you may run into warning messages after producing the graph if the continuous variable you want to analyze contains NAs. To avoid these warning messages, you can use the drop_na() function from tidyr in the data manipulation step above to remove the NAs rows from the dataset (e.g drop_na(AGE, BMRKR1)).\n\nCodegraph &lt;- ggplot(adsl, aes(x = AGE, y = BMRKR1)) +\n  geom_point()\n\ngraph +\n  labs(x = \"Age (Years)\", y = \"Biomarker (Units)\")\n\n\n\n\nWe can also plot it on a log scale.\n\nCodegraph +\n  scale_y_log10() +\n  labs(x = \"Age (Years)\", y = \"Biomarker (Log(Units))\")\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      labeling_0.4.2     knitr_1.42         GGally_2.1.2      \n[29] forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4       \n[33] broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1     \n[37] scales_1.2.1       backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4    \n[41] farver_2.1.1       digest_0.6.31      rbibutils_2.2.13   grid_4.2.2        \n[45] Rdpack_2.4         cli_3.6.1          tools_4.2.2        tibble_3.2.1      \n[49] tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60        Matrix_1.5-4      \n[53] rmarkdown_2.21     reshape_0.8.9      R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/spg02.html",
    "href": "graphs/spg02.html",
    "title": "SPG2",
    "section": "",
    "text": "Setup\nStandard Plot\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adrs data set from the scda package to create the STEP response graph. We start by filtering the adrs data set for response evaluable patients and the response parameter of interest, creating a new logical variable encoding response (response patients should solely be CR patients), binarizing the ARM variable.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadrs &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adrs %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAM == \"Best Confirmed Overall Response by Investigator\", BMEASIFL == \"Y\") %&gt;%\n  mutate(\n    is_rsp = AVALC == \"CR\",\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    )\n  )\n\n\n\n\nWe then perform with the fit_rsp_step() function the required calculations: this function fits the Subgroup Treatment Effect Pattern (STEP) logistic regression models for the response outcome within each of the percentile intervals of the age variable AGE defining the subgroups. The treatment arm variable must have exactly two levels, where the first one is taken as reference, i.e. the estimated odds ratios are for the comparison of the second level vs. the first one.\nIn this example we fit the default model where a constant treatment effect is estimated in each of the subgroups that are created according to age quantiles.\n\nCodevars &lt;- list(\n  time = \"AVAL\",\n  response = \"is_rsp\",\n  arm = \"ARM_BIN\",\n  biomarker = \"AGE\"\n)\n\nstep_matrix &lt;- fit_rsp_step(\n  variables = vars,\n  data = adrs\n)\n\n\nIn this second example we fit instead a model with a linear age interaction term and we control the bandwidth (50% of data) of the STEP windows for the age variable.\n\nCodestep_matrix &lt;- fit_rsp_step(\n  variables = vars,\n  data = adrs,\n  control = c(control_logistic(), control_step(degree = 1, bandwidth = 0.5))\n)\n\n\nBefore we can plot the data, the broom::tidy() method needs to be applied to the STEP result to obtain graph ready data. Thereafter with the g_step() function we can create a graph showing the estimated odds ratio along the continuous age subgroups.\n\nCodestep_data &lt;- broom::tidy(step_matrix)\n\ngraph &lt;- g_step(step_data)\n\ngraph\n\n\n\n\nWe can also add a reference line and change the axis limits.\n\nCodegraph +\n  geom_hline(aes(yintercept = 1), linetype = 2) +\n  coord_cartesian(ylim = c(0, 10))\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      labeling_0.4.2     knitr_1.42         GGally_2.1.2      \n[29] forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4       \n[33] broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1     \n[37] scales_1.2.1       backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4    \n[41] farver_2.1.1       digest_0.6.31      rbibutils_2.2.13   grid_4.2.2        \n[45] Rdpack_2.4         cli_3.6.1          tools_4.2.2        tibble_3.2.1      \n[49] tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60        Matrix_1.5-4      \n[53] rmarkdown_2.21     reshape_0.8.9      R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/sfg02.html",
    "href": "graphs/sfg02.html",
    "title": "SFG2",
    "section": "",
    "text": "Setup\nStandard Plot\nSurvival Forest Graph for Overall Population and by Percentiles of Continuous Biomarker with “Less than Percentage” Cutoffs (SFG2A)\nSurvival Forest Graph for Overall Population and by Continuous Biomarker with “Above and Below Percentage” Cutoffs (SFG2B)\nSurvival Forest Graph for Overall Population and by Percentiles of Continuous Biomarker Within Percentile Cutoff Bins (SFG2C)\nSurvival Forest Graph for Overall Population and by Intervals of Continuous Biomarker with “Greater Than a Numerical Cutoff” (SFG2D)\nSession Info\n\n\n\nWe prepare the data similarly as in SFG1. In particular we use again the cut_quantile_bins() function, here to obtain quartile bins of the continuous biomarker BMRKR1.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nBMRKR1_probs &lt;- c(0.25, 0.5, 0.75)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0,\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    BMRKR1 = ifelse(BEP01FL == \"N\", NA, BMRKR1),\n    BMRKR1_BIN = explicit_na(cut_quantile_bins(BMRKR1, BMRKR1_probs)),\n    BMRKR2 = fct_explicit_na_if(BMRKR2, BEP01FL == \"N\")\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR2 = \"Biomarker (Categorical)\",\n    BMRKR1_BIN = \"Biomarker (Binned)\"\n  )\n\n\n\n\nFor the calculations, we start by getting the levels from BMRKR1_BIN which saves us typing them manually in the groups_lists definition. This definition is required here so that we can have overlapping subgroups.\n\nCodeBMRKR1_BIN_levels &lt;- levels(adtte$BMRKR1_BIN)\n\ntbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BEP01FL\", \"BMRKR1_BIN\")\n  ),\n  label_all = \"ITT\",\n  groups_lists = list(\n    BMRKR1_BIN = list(\n      \"(25%,100%]\" = BMRKR1_BIN_levels[2:4],\n      \"(50%,100%]\" = BMRKR1_BIN_levels[3:4],\n      \"(75%,100%]\" = BMRKR1_BIN_levels[4]\n    )\n  ),\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe can now produce the forest plot using the g_forest() function from tern based on this result table.\n\nCodeg_forest(result)\n\n\n\n\n\n\nWith a different groups_lists definition we can also tabulate statistics for the “below than cutoff” grouped bins.\n\nCodetbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BEP01FL\", \"BMRKR1_BIN\")\n  ),\n  label_all = \"ITT\",\n  groups_lists = list(\n    BMRKR1_BIN = list(\n      \"[0%,25%]\" = BMRKR1_BIN_levels[1],\n      \"[0%,50%]\" = BMRKR1_BIN_levels[1:2],\n      \"[0%,75%]\" = BMRKR1_BIN_levels[1:3]\n    )\n  ),\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe can now produce the forest plot using the g_forest() function.\n\nCodeg_forest(result)\n\n\n\n\n\n\nIn this template we are looking for each percentage cutoff at above vs. below subgroups: So we just provide yet another groups_lists specification for the BMRKR1_BIN binned variable.\n\nCodetbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BEP01FL\", \"BMRKR1_BIN\")\n  ),\n  label_all = \"ITT\",\n  groups_lists = list(\n    BMRKR1_BIN = list(\n      \"[0%, 25%]\" = BMRKR1_BIN_levels[1],\n      \"(25%, 100%]\" = BMRKR1_BIN_levels[2:4],\n      \"[0%, 50%]\" = BMRKR1_BIN_levels[1:2],\n      \"(50%, 100%]\" = BMRKR1_BIN_levels[3:4],\n      \"[0%, 75%]\" = BMRKR1_BIN_levels[1:3],\n      \"(75%, 100%]\" = BMRKR1_BIN_levels[4]\n    )\n  ),\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe can now produce the forest plot using the g_forest() function.\n\nCodeg_forest(result)\n\n\n\n\n\n\nHere we use the biomarker variable BMRKR1_BIN with its original percentage bins to tabulate the statistics to be able to use as an input for the forest plot.\n\nCodetbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BEP01FL\", \"BMRKR1_BIN\")\n  ),\n  label_all = \"ITT\",\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe remove the last line with the &lt;Missing&gt; level.\n\nCoderesult &lt;- result[-10, , keep_topleft = TRUE]\n\n\nWe can now produce the forest plot using the g_forest() function.\n\nCodeg_forest(result)\n\n\n\n\n\n\nWe start by deriving a new biomarker variable BMRKR1_BIN2 with greater than numerical cutoffs for BMRKR1 using the cut() funciton, and then tabulate the statistics as above to be able to use them as an input for the forest plot.\n\nCodeBMRKR1_cuts &lt;- c(0, 5, 10, Inf)\n\nadtte &lt;- adtte %&gt;%\n  mutate(\n    BMRKR1_BIN2 = explicit_na(cut(\n      BMRKR1,\n      BMRKR1_cuts,\n      include.lowest = FALSE,\n      right = FALSE\n    ))\n  )\n\ntbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BEP01FL\", \"BMRKR1_BIN2\")\n  ),\n  label_all = \"ITT\",\n  groups_lists = list(\n    BMRKR1_BIN2 = list(\n      \"&gt; 5\" = c(\"[5,10)\", \"[10,Inf)\"),\n      \"&gt; 10\" = \"[10,Inf)\"\n    )\n  ),\n  data = adtte\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte$AVALU[1]\n  )\n\n\nWe can now produce forest plot using g_forest() function from tern based on this result table.\n\nCodeg_forest(result)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  },
  {
    "objectID": "graphs/dg01.html",
    "href": "graphs/dg01.html",
    "title": "DG1",
    "section": "",
    "text": "Setup\nStandard Plot\nHistograms of Two Numeric Variables (DG1A)\nHistogram of One Numeric Variable by Treatment Arm (DG1B)\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adsl data set from the scda package and ggplot2 to create the plots. In this example, we will plot histograms of one or multiple numeric variables. We start by selecting the biomarker evaluable population with the flag variable BEP01FL and then populating a new continuous biomarker variable, BMRKR3.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(tidyr)\n\nadsl &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adsl %&gt;%\n  df_explicit_na() %&gt;%\n  filter(BEP01FL == \"Y\") %&gt;%\n  mutate(BMRKR3 = rnorm(n(), mean = 7, sd = 2))\n\n\n\n\nIn this example, we will create a combined histogram/density graph of a continuous biomarker variable. Note that you may run into warning messages after producing the graph if the variable you want to analyze contains NAs. To avoid these warning messages, you can use the drop_na() function from tidyr in the data manipulation step above to remove the NAs rows from the dataset (e.g drop_na(BMRKR1)).\n\nCodegraph &lt;- ggplot(adsl, aes(BMRKR1)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30) +\n  geom_density(aes(y = after_stat(density)))\n\ngraph\n\n\n\n\nWe can also calculate some descriptive statistics and populate a table that we can overlay on top of the plot. The tibble function is used to build a data frame data_tb with 3 variables. The x and y variables represent the coordinates on the plot to show the statistic values and can be modified based on preference. For example, x = 1 and y = 1 will put the statistics table in the top right corner of the graph, while x = 0 and y = 0 will put the statistics table in the bottom left corner of the graph. The tb variable contains the statistics to be shown on the plot, in the form of a nested list column starting from the original statistics tibble orig_tb. Finally, we can use the geom_table_npc() layer function to process the data_tb input and add the statistics table to the existing graph.\n\nCodeorig_tb &lt;- with(adsl, tribble(\n  ~Statistic, ~Value,\n  \"N\", length(BMRKR1),\n  \"SD\", sd(BMRKR1),\n  \"Median\", median(BMRKR1),\n  \"Min.\", min(BMRKR1),\n  \"Max.\", max(BMRKR1)\n))\n\ndata_tb &lt;- tibble(x = 1, y = 1, tb = list(orig_tb))\n\ngraph &lt;- graph +\n  geom_table_npc(data = data_tb, aes(npcx = x, npcy = y, label = tb))\n\ngraph\n\n\n\n\n\n\nIn this example, we will manipulate the variables that we want to show in the graph into a long data format using the pivot_longer() function from tidyr. This is necessary such that below we can use the faceting layer facet_grid() to plot each variable in its own facet.\n\nCodenum_var_long &lt;- adsl %&gt;%\n  pivot_longer(\n    c(BMRKR1, BMRKR3),\n    names_to = \"var\",\n    values_to = \"value\"\n  ) %&gt;%\n  select(var, value)\n\n\nProducing the base plot is then simple: We use the same code as above but just add the faceting layer.\n\nCodegraph &lt;- ggplot(num_var_long, aes(value)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30) +\n  geom_density(aes(y = after_stat(density))) +\n  facet_grid(var ~ .)\n\ngraph\n\n\n\n\nSimilar to the DG1 example, we will calculate and populate the statistics table to accompany the plot. Note that also here we can use the pivot_longer() function to also obtain the statistics table input orig_tb and then data_tb in long format, and thus parallel to the biomarker variable format in num_var_long.\n\nCodeorig_tb &lt;- num_var_long %&gt;%\n  group_by(var) %&gt;%\n  summarize_at(\"value\", list(mean = mean, median = median)) %&gt;%\n  pivot_longer(\n    c(mean, median),\n    names_to = \"Statistic\",\n    values_to = \"Value\"\n  )\n\ndata_tb &lt;- orig_tb %&gt;%\n  group_by(var) %&gt;%\n  summarize(x = 1, y = 1, tb = list(tibble(Statistic, Value)))\n\ngraph &lt;- graph +\n  geom_table_npc(data = data_tb, aes(npcx = x, npcy = y, label = tb))\n\ngraph\n\n\n\n\n\n\nBelow example shows histograms for the BMRKR1 variable by treatment ARM. Including a statistics table in this graph works in the same way as we did above for DG1A.\n\nCodegraph &lt;- ggplot(adsl, aes(BMRKR1)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30) +\n  geom_density(aes(y = after_stat(density))) +\n  facet_grid(ARM ~ .)\n\ngraph\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tidyr_1.3.0           tibble_3.2.1          dplyr_1.1.2          \n[4] ggplot2.utils_0.2.1   ggplot2_3.4.2         tern_0.8.1.9012      \n[7] rtables_0.6.0.9004    magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      labeling_0.4.2     knitr_1.42         GGally_2.1.2      \n[29] forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4       \n[33] broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1     \n[37] scales_1.2.1       backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4    \n[41] farver_2.1.1       gridExtra_2.3      digest_0.6.31      rbibutils_2.2.13  \n[45] grid_4.2.2         Rdpack_2.4         cli_3.6.1          tools_4.2.2       \n[49] pkgconfig_2.0.3    MASS_7.3-60        Matrix_1.5-4       rmarkdown_2.21    \n[53] reshape_0.8.9      R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/rg03.html",
    "href": "graphs/rg03.html",
    "title": "RG3",
    "section": "",
    "text": "Setup\nStandard Plot\nResponse Graph Comparing Subgroups of BEP (RG3A)\nPlot Counts Instead of Percentages in Response Graph Comparing Subgroups of BEP (RG3B)\nSession Info\n\n\n\nThe same setup as in RG1 is used.\nFor ggplot() used in all analyses, we add by = BMEASIFL in the aesthetics to support the calculation of proportions using geom_text(stat = \"prop\").\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadrs &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adrs %&gt;%\n  df_explicit_na() %&gt;%\n  mutate(\n    AVALC = ordered(AVALC, levels = c(\"&lt;Missing&gt;\", \"NE\", \"PD\", \"SD\", \"PR\", \"CR\")),\n    AVALC_BIN = fct_collapse_only(\n      AVALC,\n      Yes = c(\"CR\", \"PR\"),\n      No = c(\"PD\", \"SD\", \"NE\", \"&lt;Missing&gt;\")\n    ),\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      Ctrl = c(\"B: Placebo\"),\n      Trt = c(\"A: Drug X\", \"C: Combination\")\n    )\n  ) %&gt;%\n  filter(PARAMCD == \"BESRSPI\", BMEASIFL == \"Y\")\n\n\n\n\nIn this example we can use the facet_grid() layer with the margins = TRUE option to compare the responses between the biomarker evaluable population (BEP) and the overall population.\n\nCodegraph &lt;- ggplot(adrs, aes(BMEASIFL, fill = AVALC_BIN, by = BMEASIFL)) +\n  geom_bar(position = \"fill\") +\n  geom_text(stat = \"prop\", position = position_fill(.5), colour = \"white\") +\n  scale_y_continuous(\n    labels = scales::percent,\n    name = \"Proportion %\"\n  ) +\n  scale_x_discrete(labels = NULL) +\n  xlab(NULL)\n\ngraph +\n  facet_grid(BEP01FL ~ ., margins = TRUE)\n\n\n\n\nIn this example we compare the responses across treatment arms between the biomarker evaluable population and the full population. We can add the option margins = TRUE option within the facet_grid() layer to obtain the responses across all treatment arms and their combination within each of the populations.\n\nCodegraph +\n  facet_grid(BEP01FL ~ ARM_BIN, margins = TRUE)\n\n\n\n\n\n\nIn this example we compare the responses across subgroups of the BEP defined by the levels of a categorical biomarker, and overall BEP, again using the facet_grid() layer with the option margins = TRUE. We do need to filter first on the BEP flag to restrict the data to the BEP.\n\nCodeadrs_bep &lt;- adrs %&gt;%\n  filter(BEP01FL == \"Y\")\n\ngraph &lt;- ggplot(adrs_bep, aes(BMEASIFL, fill = AVALC_BIN, by = BMEASIFL)) +\n  geom_bar(position = \"fill\") +\n  scale_y_continuous(\n    labels = scales::percent,\n    name = \"Proportion %\"\n  ) +\n  geom_text(stat = \"prop\", position = position_fill(.5), colour = \"white\") +\n  facet_grid(BMRKR2 ~ ARM_BIN, margins = TRUE)\n\ngraph\n\n\n\n\n\n\nIn this example we compare the responses across treatment arms between the BEP and the full population using the option position = \"stack\" in the geom_bar() layer to display counts instead of percentages.\n\nCodegraph &lt;- ggplot(adrs, aes(BMEASIFL, fill = AVALC_BIN, by = BMEASIFL)) +\n  geom_bar(position = \"stack\") +\n  scale_x_discrete(labels = NULL) +\n  xlab(NULL) +\n  geom_text(stat = \"count\", aes(label = after_stat(count)), position = position_stack(.5), colour = \"white\") +\n  facet_grid(BEP01FL ~ ARM_BIN, margins = TRUE)\n\ngraph\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] viridisLite_0.4.2  htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3        \n[13] survival_3.5-5     rlang_1.1.1        pillar_1.9.0       glue_1.6.2        \n[17] withr_2.5.0        RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3   \n[21] plyr_1.8.8         munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2 \n[25] codetools_0.2-19   evaluate_0.21      labeling_0.4.2     knitr_1.42        \n[29] GGally_2.1.2       forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1     \n[33] fansi_1.0.4        broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2        \n[37] polynom_1.4-1      scales_1.2.1       backports_1.4.1    checkmate_2.2.0   \n[41] jsonlite_1.8.4     farver_2.1.1       digest_0.6.31      rbibutils_2.2.13  \n[45] grid_4.2.2         Rdpack_2.4         cli_3.6.1          tools_4.2.2       \n[49] tibble_3.2.1       tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60       \n[53] Matrix_1.5-4       rmarkdown_2.21     reshape_0.8.9      R6_2.5.1          \n[57] compiler_4.2.2"
  },
  {
    "objectID": "graphs/index.html",
    "href": "graphs/index.html",
    "title": "",
    "section": "",
    "text": "Graphs\nThis is a collection of Biomarker Analysis graph templates."
  },
  {
    "objectID": "graphs/sfg03.html",
    "href": "graphs/sfg03.html",
    "title": "SFG3",
    "section": "",
    "text": "Setup\nStandard Plot\nComparing Between Genders in Survival Forest Graph for One Treatment Arm (SFG3A)\nSession Info\n\n\n\nWe prepare the data similarly as in SFG1, focusing on a single arm in the biomarker evaluable population.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\",\n    ARM == \"A: Drug X\",\n    BEP01FL == \"Y\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR1 = \"Biomarker (Countinuous)\"\n  )\n\n\n\n\nWe define a vector of all cutpoints to use for a numeric biomarker (here BMRKR1). We lapply() over this vector, each time generating a binary factor variable BMRKR1_cut and then tabulating the resulting statistics as e.g. in SFG1. Then we rbind() all tables in the list together.\n\nCodeall_cutpoints &lt;- c(2.5, 5, 7.5, 10)\n\ntables_all_cutpoints &lt;- lapply(all_cutpoints, function(cutpoint) {\n  adtte_cut &lt;- adtte %&gt;%\n    mutate(\n      BMRKR1_cut = explicit_na(factor(\n        ifelse(BMRKR1 &gt; cutpoint, \"Greater\", \"Less\")\n      ))\n    )\n  tbl &lt;- extract_survival_subgroups(\n    variables = list(\n      tte = \"AVAL\",\n      is_event = \"is_event\",\n      arm = \"BMRKR1_cut\"\n    ),\n    label_all = paste0(\"BMRKR1 (\", cutpoint, \")\"),\n    data = adtte_cut\n  )\n  basic_table() %&gt;%\n    tabulate_survival_subgroups(\n      df = tbl,\n      vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n      time_unit = adtte_cut$AVALU[1]\n    )\n})\nresult &lt;- do.call(rbind, tables_all_cutpoints)\n\n\nWe can now produce the forest plot using the g_forest() function. Notice that the result object in these derivation steps has lost its attributes. In order to specify the column indices for the estimator, confidence interval, and header, we need to derive the attributes from one of the original tables and specify them using the col_x, col_y and forest_header arguments of g_forest().\n\nCodeone_table &lt;- tables_all_cutpoints[[1]]\ng_forest(result,\n  col_x = attr(one_table, \"col_x\"),\n  col_ci = attr(one_table, \"col_ci\"),\n  forest_header = attr(one_table, \"forest_header\")\n)\n\n\n\n\n\n\nWe prepare the data similarly as in SFG3 above on this page. Additionally we are filtering synthetic_cdisc_data$adtte to keep only two categories for the SEX variable (otherwise we would not be able to do the forest plot), and we are keeping all ITT patients. We then tabulate statistics to be able to use them as an input for the forest plot.\n\nCodeadtte_mf &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\",\n    ARM == \"A: Drug X\",\n    SEX %in% c(\"M\", \"F\")\n  ) %&gt;%\n  droplevels() %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR1 = \"Biomarker (Countinuous)\"\n  )\n\ntbl &lt;- extract_survival_subgroups(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    arm = \"SEX\",\n    subgroups = \"BEP01FL\"\n  ),\n  label_all = \"ITT\",\n  data = adtte_mf\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_survival_subgroups(\n    df = tbl,\n    vars = c(\"n_tot_events\", \"n\", \"n_events\", \"median\", \"hr\", \"ci\"),\n    time_unit = adtte_mf$AVALU[1]\n  )\n\n\nWe can now produce the forest plot using the g_forest() function.\n\nCodeg_forest(result)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  },
  {
    "objectID": "graphs/rfg03.html",
    "href": "graphs/rfg03.html",
    "title": "RFG3",
    "section": "",
    "text": "Setup\nStandard Plot\nSession Info\n\n\n\nFor response endpoints it is good to show how to obtain within-treatment-arms comparisons of biomarker subgroups. This is similar to SFG04.\nSimilarly like in RFG1.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadrs &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adrs %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"BESRSPI\", BMEASIFL == \"Y\") %&gt;%\n  mutate(\n    is_rsp = AVALC %in% c(\"CR\", \"PR\"),\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    BMRKR2 = fct_explicit_na_if(BMRKR2, BEP01FL == \"N\")\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR2 = \"Biomarker (Categorical)\"\n  )\n\n\n\n\nWe define a vector of all cutpoints to use for a numeric biomarker (here BMRKR1).\nWe lapply() over this vector, each time generating a binary factor variable BMRKR1_cut and then tabulating the resulting statistics similar to SFG4, this time including the treatment arms in the subgroups argument. Then we rbind() all tables in the list together.\n\nCode# across arm ----\ncutpoints &lt;- c(4, 5, 8)\n\nadrs2 &lt;- adrs %&gt;%\n  mutate(\n    BMRKR1 = ifelse(BEP01FL == \"N\", NA, BMRKR1),\n    BMRKR1_cut = explicit_na(cut(BMRKR1, c(-Inf, cutpoints, Inf), right = FALSE))\n  ) %&gt;%\n  var_relabel(BMRKR1_cut = \"Biomarker (Binned Continuous)\")\n\ntables_all_cutpoints &lt;- lapply(cutpoints, function(cutpoint) {\n  adrs3 &lt;- adrs2 %&gt;%\n    filter(!is.na(BMRKR1)) %&gt;%\n    mutate(\n      BMRKR1_thresh = explicit_na(factor(\n        ifelse(BMRKR1 &gt; cutpoint, \"Greater\", \"Less\")\n      ))\n    )\n  tbl &lt;- extract_rsp_subgroups(\n    variables = list(\n      rsp = \"is_rsp\",\n      arm = \"BMRKR1_thresh\",\n      subgroups = c(\"ARM_BIN\")\n    ),\n    label_all = paste0(\"BMRKR1 (\", cutpoint, \")\"),\n    data = adrs3\n  )\n  basic_table() %&gt;%\n    tabulate_rsp_subgroups(\n      df = tbl,\n      vars = c(\"n_tot\", \"n\", \"n_rsp\", \"prop\", \"or\", \"ci\")\n    )\n})\n\nresult &lt;- do.call(rbind, tables_all_cutpoints)\n\n\nWe can look at the result in the console already.\n\nCoderesult\n\nBaseline Risk Factors                             Greater                            Less                                            \n                             Total n   n    Responders   Response (%)   n    Responders   Response (%)   Odds Ratio       95% CI     \n—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nBMRKR1 (4)                     97      62       61          98.4%       35       34          97.1%          0.56       (0.03, 9.20)  \nDescription of Planned Arm                                                                                                           \n  CTRL                         36      21       21          100.0%      15       15          100.0%         1.00      (0.00, &gt;999.99)\n  TRT                          61      41       40          97.6%       20       19          95.0%          0.48       (0.03, 8.01)  \nBMRKR1 (5)                     97      50       49          98.0%       47       46          97.9%          0.94       (0.06, 15.45) \nDescription of Planned Arm                                                                                                           \n  CTRL                         36      16       16          100.0%      20       20          100.0%         1.00      (0.00, &gt;999.99)\n  TRT                          61      34       33          97.1%       27       26          96.3%          0.79       (0.05, 13.21) \nBMRKR1 (8)                     97      16       16          100.0%      81       79          97.5%         &lt;0.01      (0.00, &gt;999.99)\nDescription of Planned Arm                                                                                                           \n  CTRL                         36      3        3           100.0%      33       33          100.0%         1.00      (0.00, &gt;999.99)\n  TRT                          61      13       13          100.0%      48       46          95.8%         &lt;0.01      (0.00, &gt;999.99)\n\n\nWe can now produce the forest plot using the g_forest() function. Similarly as in SFG4 we need to specify the col_x, col_y and forest_header arguments for g_forest() by recovering them from one of the original tables.\n\nCodeone_table &lt;- tables_all_cutpoints[[1]]\ng2 &lt;- g_forest(\n  result,\n  col_x = attr(one_table, \"col_x\"),\n  col_ci = attr(one_table, \"col_ci\"),\n  forest_header = attr(one_table, \"forest_header\"),\n  col_symbol_size = attr(one_table, \"col_symbol_size\")\n)\n\n\n\n\nWith gridExtra::grid.arrange() the plot can be combined e.g. with a between-treatment-arms comparison, like RFG1A\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      knitr_1.42         GGally_2.1.2       forcats_1.0.0     \n[29] EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4        broom_1.0.4       \n[33] Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1      scales_1.2.1      \n[37] backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4     digest_0.6.31     \n[41] rbibutils_2.2.13   grid_4.2.2         Rdpack_2.4         cli_3.6.1         \n[45] tools_4.2.2        tibble_3.2.1       tidyr_1.3.0        pkgconfig_2.0.3   \n[49] MASS_7.3-60        Matrix_1.5-4       rmarkdown_2.21     reshape_0.8.9     \n[53] R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/kg05.html",
    "href": "graphs/kg05.html",
    "title": "KG5",
    "section": "",
    "text": "Setup\nStandard Plot\nSpecify Numerical Cutoff in Kaplan-Meier Graph by Treatment Arm and Continuous Biomarker Cut (KG5A)\nMore than Two Groups in Kaplan-Meier Graph by Treatment Arm and Continuous Biomarker Cut (KG5B)\nSession Info\n\n\n\nA setup similar to KG4 is used. The difference here is that we create the initial binary biomarker variable BMRKR1_BIN from comparing the continuous biomarker variable BMRKR1 with a cutoff of interest.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\" & BEP01FL == \"Y\") %&gt;%\n  mutate(\n    is_event = CNSR == 0,\n    BMRKR1_BIN = ifelse(\n      BMRKR1 &gt; 5, \"High\", \"Low\"\n    ),\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    ARM_BMRKR1 = interaction(ARM_BIN, BMRKR1_BIN)\n  )\n\nvariables &lt;- list(tte = \"AVAL\", is_event = \"is_event\", arm = \"ARM_BMRKR1\")\n\n\n\n\nWe can produce the basic graph using the g_km() function from tern.\n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = FALSE,\n  col = c(\"red\", \"blue\", \"red\", \"blue\"),\n  lty = c(1, 1, 2, 2)\n)\n\n\n\n\nWe can also choose to annotate the plot with the median survival time for each of the treatment arms using the annot_surv_med = TRUE option.\n\nCodeg_km(\n  df = adtte,\n  variables = variables,\n  annot_surv_med = TRUE,\n  col = c(\"red\", \"blue\", \"red\", \"blue\"),\n  lty = c(1, 1, 2, 2)\n)\n\n\n\n\n\n\nAlternatively we can also use the cut() function to cut the continuous biomarker variable BMRKR1 into a factor with two levels BMRKR1_CAT, and then create its interaction with the treatment arm variable, to create effectively the same graphical comparison.\n\nCodeadtte2 &lt;- adtte %&gt;%\n  mutate(\n    BMRKR1_CAT = cut(BMRKR1, c(0, 5, 22)),\n    ARM_BMRKR1 = interaction(ARM_BIN, BMRKR1_CAT)\n  )\n\ng_km(\n  df = adtte2,\n  variables = variables,\n  annot_surv_med = TRUE,\n  col = c(\"red\", \"blue\", \"red\", \"blue\"),\n  lty = c(1, 1, 2, 2)\n)\n\n\n\n\n\n\nThe advantage of using the cut() function is that it is sufficient to add additional cutoffs in order to obtain more than two bins for the cut version of the continuous biomarker variable. Again we can check the order of the factor levels to determine the col and lty arguments for g_km(). Here we want to always use red for the control and blue for the treatment arm, and then vary the line type for the different biomarker bins.\n\nCodeadtte3 &lt;- adtte %&gt;%\n  mutate(\n    BMRKR1_CAT = cut(BMRKR1, c(0, 5, 10, 22)),\n    ARM_BMRKR1 = interaction(ARM_BIN, BMRKR1_CAT)\n  )\nlevels(adtte3$ARM_BMRKR1)\n\n[1] \"CTRL.(0,5]\"   \"TRT.(0,5]\"    \"CTRL.(5,10]\"  \"TRT.(5,10]\"   \"CTRL.(10,22]\"\n[6] \"TRT.(10,22]\" \n\nCodeg_km(\n  df = adtte3,\n  variables = variables,\n  annot_surv_med = TRUE,\n  col = c(\"red\", \"blue\", \"red\", \"blue\", \"red\", \"blue\"),\n  lty = c(1, 1, 2, 2, 3, 3)\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2       pillar_1.9.0         forcats_1.0.0       \n [4] tools_4.2.2          digest_0.6.31        lattice_0.21-8      \n [7] jsonlite_1.8.4       evaluate_0.21        lifecycle_1.0.3     \n[10] tibble_3.2.1         gtable_0.3.3         checkmate_2.2.0     \n[13] pkgconfig_2.0.3      rlang_1.1.1          Matrix_1.5-4        \n[16] cli_3.6.1            yaml_2.3.7           xfun_0.39           \n[19] fastmap_1.1.1        gridExtra_2.3        withr_2.5.0         \n[22] knitr_1.42           generics_0.1.3       vctrs_0.6.2         \n[25] htmlwidgets_1.6.2    grid_4.2.2           tidyselect_1.2.0    \n[28] glue_1.6.2           R6_2.5.1             fansi_1.0.4         \n[31] Rdpack_2.4           survival_3.5-5       rmarkdown_2.21      \n[34] scda_0.1.6.9000      farver_2.1.1         nestcolor_0.1.1.9001\n[37] ggplot2_3.4.2        purrr_1.0.1          tidyr_1.3.0         \n[40] codetools_0.2-19     splines_4.2.2        backports_1.4.1     \n[43] scales_1.2.1         htmltools_0.5.5      rbibutils_2.2.13    \n[46] colorspace_2.1-0     labeling_0.4.2       utf8_1.2.3          \n[49] munsell_0.5.0        broom_1.0.4"
  },
  {
    "objectID": "graphs/dg03.html",
    "href": "graphs/dg03.html",
    "title": "DG3",
    "section": "",
    "text": "Setup\nStandard Plot\nBarplot of a Categorical Variable by Another Categorical Variable (DG3A)\nSession Info\n\n\n\nThe graphs below summarize the distribution of a categorical biomarker variable as barplots, either in the overalll population or by one or more categorical clinical variables.\nWe will use the synthetic_cdisc_data$adsl data set from the scda package to illustrate the graph and will select on the biomarker evaluable population with BEP01FL. The column BMRKR2 contains the biomarker values on a categorical scale. We will use ARM as categorical clinical variable.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadsl &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adsl %&gt;%\n  df_explicit_na() %&gt;%\n  filter(BEP01FL == \"Y\")\n\n\n\n\nHere below the code for a simple barplot showing the counts of the categories.\n\nCodegraph &lt;- ggplot(adsl, aes(BMRKR2)) +\n  geom_bar()\n\ngraph\n\n\n\n\nWe can customize the labels of the axes.\n\nCodegraph +\n  scale_x_discrete(\n    breaks = c(\"LOW\", \"MEDIUM\", \"HIGH\"),\n    labels = c(\"Low\", \"Medium\", \"High\"),\n    name = \"Biomarker\"\n  ) +\n  scale_y_continuous(name = \"count\")\n\n\n\n\nWe can also add the absolute count above each of the columns.\n\nCodegraph +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    vjust = -.5\n  )\n\n\n\n\nIf instead of counts we want to display the percentages then the following options could be used:\n\nCodegraph &lt;- ggplot(\n  adsl,\n  aes(\n    x = BMRKR2,\n    y = prop.table(after_stat(count)),\n    label = scales::percent(prop.table(after_stat(count)))\n  )\n) +\n  geom_bar()\n\ngraph\n\n\n\n\nWe can customize the axes.\n\nCodegraph +\n  scale_y_continuous(\n    labels = scales::percent_format(),\n    name = \"Proportion (%)\"\n  ) +\n  scale_x_discrete(\n    breaks = c(\"LOW\", \"MEDIUM\", \"HIGH\"),\n    labels = c(\"Low\", \"Medium\", \"High\"),\n    name = \"Biomarker\"\n  )\n\n\n\n\nWe can add the percentages above each of the columns.\n\nCodegraph +\n  geom_text(\n    stat = \"count\",\n    vjust = -0.5\n  )\n\n\n\n\n\n\nHere below the code for a simple distribution of the category counts of a first biomarker varaible (BMRKR2) split by a second categorical variable (ARM). We can use again the facet_grid() layer.\n\nCodegraph &lt;- ggplot(adsl, aes(BMRKR2)) +\n  geom_bar() +\n  facet_grid(. ~ ARM)\n\ngraph\n\n\n\n\nWe could instead display the columns next to each other within the same graph with the fill aesthetic and the position_dodge() option instead of using the facet_grid() layer.\n\nCodegraph &lt;- ggplot(adsl, aes(ARM, fill = BMRKR2)) +\n  geom_bar(position = position_dodge())\n\ngraph\n\n\n\n\nWe can then again add the absolute count above each of the columns.\n\nCodegraph +\n  geom_text(\n    stat = \"count\",\n    aes(label = after_stat(count)),\n    position = position_dodge(0.9),\n    vjust = -.5\n  )\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      labeling_0.4.2     knitr_1.42         GGally_2.1.2      \n[29] forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4       \n[33] broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1     \n[37] scales_1.2.1       backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4    \n[41] farver_2.1.1       digest_0.6.31      rbibutils_2.2.13   grid_4.2.2        \n[45] Rdpack_2.4         cli_3.6.1          tools_4.2.2        tibble_3.2.1      \n[49] tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60        Matrix_1.5-4      \n[53] rmarkdown_2.21     reshape_0.8.9      R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/kg03.html",
    "href": "graphs/kg03.html",
    "title": "KG3",
    "section": "",
    "text": "Setup\nStandard Plot\nSession Info\n\n\n\nThe same data set as in KG1A is used. The difference is that here we use the categorical biomarker variable BMRKR2 as the treatment arm in variables which is then used by g_km() below.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte_arm_bep &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\", ARM == \"A: Drug X\", BEP01FL == \"Y\") %&gt;%\n  mutate(is_event = CNSR == 0)\n\nvariables &lt;- list(tte = \"AVAL\", is_event = \"is_event\", arm = \"BMRKR2\")\n\n\n\n\nWe can produce the basic plot using the g_km() function from tern.\n\nCodeg_km(\n  df = adtte_arm_bep,\n  variables = variables,\n  annot_surv_med = FALSE\n)\n\n\n\n\nWe can also choose to annotate the plot with the median survival time for each of the biomarker subgroups using the annot_surv_med = TRUE option.\n\nCodeg_km(\n  df = adtte_arm_bep,\n  variables = variables,\n  annot_surv_med = TRUE\n)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2       pillar_1.9.0         forcats_1.0.0       \n [4] tools_4.2.2          digest_0.6.31        lattice_0.21-8      \n [7] jsonlite_1.8.4       evaluate_0.21        lifecycle_1.0.3     \n[10] tibble_3.2.1         gtable_0.3.3         checkmate_2.2.0     \n[13] pkgconfig_2.0.3      rlang_1.1.1          Matrix_1.5-4        \n[16] cli_3.6.1            yaml_2.3.7           xfun_0.39           \n[19] fastmap_1.1.1        gridExtra_2.3        withr_2.5.0         \n[22] knitr_1.42           generics_0.1.3       vctrs_0.6.2         \n[25] htmlwidgets_1.6.2    grid_4.2.2           tidyselect_1.2.0    \n[28] glue_1.6.2           R6_2.5.1             fansi_1.0.4         \n[31] Rdpack_2.4           survival_3.5-5       rmarkdown_2.21      \n[34] scda_0.1.6.9000      farver_2.1.1         nestcolor_0.1.1.9001\n[37] ggplot2_3.4.2        purrr_1.0.1          tidyr_1.3.0         \n[40] codetools_0.2-19     splines_4.2.2        backports_1.4.1     \n[43] scales_1.2.1         htmltools_0.5.5      rbibutils_2.2.13    \n[46] colorspace_2.1-0     labeling_0.4.2       utf8_1.2.3          \n[49] munsell_0.5.0        broom_1.0.4"
  },
  {
    "objectID": "graphs/rfg01.html",
    "href": "graphs/rfg01.html",
    "title": "RFG1",
    "section": "",
    "text": "Setup\nStandard Plot\nResponse Forest Graph Only by Categorical or Binned Continuous Biomarker (RFG1A)\nSession Info\n\n\n\nThese templates are helpful when we are interested in the odds ratios between two groups, usually two treatment arms. We would like to assess how the odds ratio changes when we look at different subgroups, often defined by categorical biomarker variables, e.g.\nWe will use the synthetic_cdisc_data$adrs data set from the scda package to create the response forest graph. We start by filtering the adrs data set for the Best Confirmed Overall Response by Investigator and patients with measurable disease at baseline (BMEASIFL == \"Y\"). We create a new variable for response information (we define response patients to include CR and PR patients), and binarize the ARM variable. We also fix a data artifact by setting the categorical biomarker variable BMRKR2 to an explicit &lt;Missing&gt; level for the non-biomarker evaluable population.\nWe also relabel the biomarker evaluable population flag variable BEP01FL and the categorical biomarker variable BMRKR2 to update the display label of these variables in the graph.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadrs &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adrs %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"BESRSPI\", BMEASIFL == \"Y\") %&gt;%\n  mutate(\n    is_rsp = AVALC %in% c(\"CR\", \"PR\"),\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    BMRKR2 = fct_explicit_na_if(BMRKR2, BEP01FL == \"N\")\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR2 = \"Biomarker (Categorical)\"\n  )\n\n\n\n\nWe calculate the response forest graph subgroup results with extract_rsp_subgroups() and then use the function tabulate_rsp_subgroups() to tabulate the required statistics estimates specified in vars.\n\nCodedf &lt;- extract_rsp_subgroups(\n  variables = list(\n    rsp = \"is_rsp\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BEP01FL\", \"BMRKR2\")\n  ),\n  data = adrs,\n  conf_level = 0.95\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_rsp_subgroups(df, vars = c(\"n_tot\", \"n\", \"n_rsp\", \"prop\", \"or\", \"ci\"))\n\n\nWe can then produce the final forest plot using g_forest() function based on this result table.\n\nCodeg_forest(result)\n\n\n\n\n\n\nWe define a binned factor variable BMRKR1_cut from the continuous biomarker variable BMRKR1 to illustrate. Note that the remaining code would work the same for an originally categorical biomarker.\n\nCodeBMRKR1_cutpoint &lt;- 5\n\nadrs2 &lt;- adrs %&gt;%\n  mutate(\n    BMRKR1 = ifelse(BEP01FL == \"N\", NA, BMRKR1),\n    BMRKR1_cut = explicit_na(factor(\n      ifelse(BMRKR1 &gt; BMRKR1_cutpoint, \"Greater\", \"Less\")\n    ))\n  ) %&gt;%\n  var_relabel(BMRKR1_cut = \"Biomarker (Binned Continuous)\")\n\ndf &lt;- extract_rsp_subgroups(\n  variables = list(\n    rsp = \"is_rsp\",\n    arm = \"ARM_BIN\",\n    subgroups = c(\"BMRKR1_cut\", \"BMRKR2\")\n  ),\n  data = adrs2,\n  conf_level = 0.95\n)\n\nresult &lt;- basic_table() %&gt;%\n  tabulate_rsp_subgroups(df, vars = c(\"n_tot\", \"n\", \"n_rsp\", \"prop\", \"or\", \"ci\"))\n\n\nWe can remove the first line showing the All Patients category from the result table as follows.\n\nCoderesult &lt;- result[-1, , keep_topleft = TRUE]\n\n\nWe can then produce the forest plot again using g_forest() on this trimmed result table.\n\nCodeg_forest(result)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      knitr_1.42         GGally_2.1.2       forcats_1.0.0     \n[29] EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4        broom_1.0.4       \n[33] Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1      scales_1.2.1      \n[37] backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4     digest_0.6.31     \n[41] rbibutils_2.2.13   grid_4.2.2         Rdpack_2.4         cli_3.6.1         \n[45] tools_4.2.2        tibble_3.2.1       tidyr_1.3.0        pkgconfig_2.0.3   \n[49] MASS_7.3-60        Matrix_1.5-4       rmarkdown_2.21     reshape_0.8.9     \n[53] R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/rg01.html",
    "href": "graphs/rg01.html",
    "title": "RG1",
    "section": "",
    "text": "Setup\nStandard Plot\nBinarize Response Outcome for Response Graph for Overall Population (RG1A)\nChange Color Scheme of Response Graph for Overall Population (RG1B)\nHorizontal Response Graph for Overall Population (RG1C)\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adrs data set from the scda package to create the response plots. We transform the response variable into an ordered factor to ensure that the response labels are ordered correctly and a sequential color scheme is used in the graph. We select Best Confirmed Overall Response by Investigator to evaluate response. Finally, we select patients with measurable disease at baseline (BMEASIFL == \"Y\") as response evaluable patients.\nFor ggplot() used in all analyses, we add by = BMEASIFL in the aesthetics to support the calculation of proportions using geom_text(stat = \"prop\").\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadrs &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adrs %&gt;%\n  df_explicit_na() %&gt;%\n  mutate(AVALC = ordered(AVALC, levels = c(\"&lt;Missing&gt;\", \"NE\", \"PD\", \"SD\", \"PR\", \"CR\"))) %&gt;%\n  filter(PARAMCD == \"BESRSPI\", BMEASIFL == \"Y\")\n\n\n\n\n\nCodegraph &lt;- ggplot(adrs, aes(BMEASIFL, fill = AVALC, by = BMEASIFL)) +\n  geom_bar(aes(BMEASIFL), position = \"fill\") +\n  geom_text(stat = \"prop\", position = position_fill(.5)) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab(\"%\")\n\ngraph\n\n\n\n\n\n\nWe can use the fct_collapse_only() function from tern to binarize the response variable.\n\nCodeadrs &lt;- adrs %&gt;%\n  mutate(\n    AVALC_BIN = fct_collapse_only(\n      AVALC,\n      Yes = c(\"CR\", \"PR\"),\n      No = c(\"PD\", \"SD\", \"NE\", \"&lt;Missing&gt;\")\n    )\n  )\n\n\nWe can then produce the response plot with the newly binarized response variable.\n\nCodegraph &lt;- ggplot(adrs, aes(BMEASIFL, fill = AVALC_BIN, by = BMEASIFL)) +\n  geom_bar(position = \"fill\") +\n  geom_text(stat = \"prop\", position = position_fill(.5)) +\n  scale_y_continuous(labels = scales::percent) +\n  ylab(\"%\")\n\ngraph\n\n\n\n\n\n\nWe can use the scale_fill_manual() function from ggplot2 to change the color scheme of the plot by manually selecting colors to assign to the values.\n\nCodegraph +\n  scale_fill_manual(\"AVALC_BIN\", values = c(\"Yes\" = \"blue\", \"No\" = \"red\"))\n\n\n\n\nAlternatively we can also use the scale_fill_brewer() function from ggplot2 to change the color scheme of the plot by selecting a preset color palette.\n\nCodegraph +\n  scale_fill_brewer(palette = \"Set1\")\n\n\n\n\n\n\nThe coord_flip() function from ggplot2 can be used to exchange the x and y coordinates, i.e. plot horizontally.\n\nCodegraph +\n  coord_flip()\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] viridisLite_0.4.2  htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3        \n[13] survival_3.5-5     rlang_1.1.1        pillar_1.9.0       glue_1.6.2        \n[17] withr_2.5.0        RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3   \n[21] plyr_1.8.8         munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2 \n[25] codetools_0.2-19   evaluate_0.21      labeling_0.4.2     knitr_1.42        \n[29] GGally_2.1.2       forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1     \n[33] fansi_1.0.4        broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2        \n[37] polynom_1.4-1      scales_1.2.1       backports_1.4.1    checkmate_2.2.0   \n[41] jsonlite_1.8.4     farver_2.1.1       digest_0.6.31      rbibutils_2.2.13  \n[45] grid_4.2.2         Rdpack_2.4         cli_3.6.1          tools_4.2.2       \n[49] tibble_3.2.1       tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60       \n[53] Matrix_1.5-4       rmarkdown_2.21     reshape_0.8.9      R6_2.5.1          \n[57] compiler_4.2.2"
  },
  {
    "objectID": "graphs/spg01.html",
    "href": "graphs/spg01.html",
    "title": "SPG1",
    "section": "",
    "text": "Setup\nStandard Plot\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adtte data set from the scda package to create the STEP survival graph. We start by filtering the adtte data set for the overall survival observations, converting time of overall survival to months, creating a new variable for event information, binarizing the ARM variable, and discarding BMRKR1 values for the non-BEP. We also relabel the biomarker evaluable population flag variable BEP01FL.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0,\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    ),\n    BMRKR1 = ifelse(BEP01FL == \"N\", NA, BMRKR1)\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\"\n  )\n\n\n\n\nWe then perform with the fit_survival_step() function the required calculations: this function fits the Subgroup Treatment Effect Pattern (STEP) models for the survival outcome within each of the percentile intervals of the biomarker variable defining the subgroups. The treatment arm variable must have exactly two levels, where the first one is taken as reference, i.e. the estimated hazard ratios are for the comparison of the second level vs. the first one.\nIn this example we fit the default model where a constant treatment effect is estimated in each of the subgroups that are created according to biomarker quantiles.\n\nCodevars &lt;- list(\n  time = \"AVAL\",\n  event = \"is_event\",\n  arm = \"ARM_BIN\",\n  biomarker = \"BMRKR1\"\n)\n\nstep_matrix &lt;- fit_survival_step(\n  variables = vars,\n  data = adtte\n)\n\n\nIn this second example we fit instead a model with quadratic biomarker interaction term and we control the number of points at which the hazard ratios are estimated.\n\nCodestep_matrix &lt;- fit_survival_step(\n  variables = vars,\n  data = adtte,\n  control = c(control_coxph(), control_step(degree = 2, num_points = 15L))\n)\n\n\nBefore we can plot the data, the broom::tidy() method needs to be applied to the STEP result to obtain graph ready data. Thereafter with the g_step() function we can create a graph showing the estimated HR along the continuous biomarker subgroups.\n\nCodestep_data &lt;- broom::tidy(step_matrix)\n\ngraph &lt;- g_step(step_data)\n\ngraph\n\n\n\n\nWe can also add a reference line.\n\nCodegraph +\n  geom_hline(aes(yintercept = 1), linetype = 2)\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      labeling_0.4.2     knitr_1.42         GGally_2.1.2      \n[29] forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4       \n[33] broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1     \n[37] scales_1.2.1       backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4    \n[41] farver_2.1.1       digest_0.6.31      rbibutils_2.2.13   grid_4.2.2        \n[45] Rdpack_2.4         cli_3.6.1          tools_4.2.2        tibble_3.2.1      \n[49] tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60        Matrix_1.5-4      \n[53] rmarkdown_2.21     reshape_0.8.9      R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "graphs/sfg06.html",
    "href": "graphs/sfg06.html",
    "title": "SFG6",
    "section": "",
    "text": "Setup\nSurvival Forest Graph for Multiple Continuous Biomarkers (SFG6A)\nSurvival Forest Graph for Multiple Continuous Biomarkers by Manual Subgroup Categories (SFG6B)\nSurvival Forest Graph for Multiple Continuous Biomarkers with Stratification (SFG6C)\nSession Info\n\n\n\nThese templates are helpful when we are interested in modelling the effects of continuous biomarker variables on a time-to-event (survival) outcome, conditional on covariates and/or stratification variables included in Cox proportional hazards regression models. We would like to assess how the estimates effects change when we look at different subgroups.\nIn detail the differences to the other survival forest graphs (SFG1 to SFG5) are the following:\n\nThe extract_survival_subgroups() and tabulate_survival_subgroups() functions evaluate the treatment effects comparing two arms, across subgroups. On the other hand, the extract_survival_biomarkers() and tabulate_survival_biomarkers() functions used here in SFG6 evaluate the effects from continuous biomarkers in the Cox proportional hazards models, across subgroups.\nThe extract_survival_subgroups() and tabulate_survival_subgroups() functions only allow specification of a single treatment arm variable, while the extract_survival_biomarkers() and tabulate_survival_biomarkers() allow to look at multiple continuous biomarker variables at once.\nIn addition to the treatment arms, the use of extract_survival_subgroups() and tabulate_survival_subgroups() functions can be extended to other binary variables, as done in SFG3 and SFG4. For example, we could define the binarized ARM variable as AGE&gt;=65 vs. AGE&lt;65 and then look at the odds ratios across subgroups. For the extract_survival_biomarkers() and tabulate_survival_biomarkers() functions, we could use the original continuous biomarker variable AGE, and then look at the estimated effect across subgroups.\n\nSimilarly like in SFG3, we will use the synthetic_cdisc_data$adtte data set from the scda package. Here we just filter for the overall survival outcome in a single arm in the biomarker evaluable population.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte_f &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\",\n    ARM == \"A: Drug X\",\n    BEP01FL == \"Y\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0\n  ) %&gt;%\n  var_relabel(\n    BEP01FL = \"BEP\",\n    BMRKR1 = \"Biomarker (Countinuous)\"\n  )\n\n\n\n\nHere we specify that we would like to analyze the two continuous biomarkers BMRKR1 and AGE, conditional on the covariate SEX, in the subgroups defined by the levels of BMRKR2.\n\nCodedf &lt;- extract_survival_biomarkers(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    biomarkers = c(\"BMRKR1\", \"AGE\"),\n    covariates = \"SEX\",\n    subgroups = \"BMRKR2\"\n  ),\n  data = adtte_f\n)\n\nresult &lt;- tabulate_survival_biomarkers(\n  df = df,\n  vars = c(\"n_tot_events\", \"n_tot\", \"median\", \"hr\", \"ci\"),\n  time_unit = adtte_f$AVALU[1]\n)\n\n\nWe can look at the result in the console already.\n\nCoderesult\n\n                                  Total Events   Total n   Median (Months)   Hazard Ratio   95% Wald CI \n————————————————————————————————————————————————————————————————————————————————————————————————————————\nAge                                                                                                     \n  All Patients                         37          68           41.7             0.99       (0.94, 1.04)\n  Categorical Level Biomarker 2                                                                         \n    LOW                                13          26           48.2             0.95       (0.87, 1.04)\n    MEDIUM                             9           20           41.4             1.05       (0.93, 1.18)\n    HIGH                               15          22           43.6             0.99       (0.89, 1.09)\nBiomarker (Countinuous)                                                                                 \n  All Patients                         37          68           41.7             0.94       (0.84, 1.05)\n  Categorical Level Biomarker 2                                                                         \n    LOW                                13          26           48.2             0.96       (0.76, 1.21)\n    MEDIUM                             9           20           41.4             0.94       (0.79, 1.12)\n    HIGH                               15          22           43.6             0.89       (0.70, 1.12)\n\n\nNote that in addition to the Categorical Level Biomarker 2 subgroups we automatically also get the estimates for the overall patient population in the All Patients rows.\nWe can then produce the final forest plot using the g_forest() function on this tabular result.\n\nCodeg_forest(result, xlim = c(0.7, 1.4))\n\n\n\n\nHere we can see that the continuous biomarker (BMRKR1) shows a trend towards an estimated positive effect on survival (it is not statistically significant though as the confidence intervals still overlap the hazard ratio 1). It is a bit easier to see this here rather than in a cutpoint analysis as presented in SFG3.\n\n\nIt is also possible to join and select subgroup categories manually using the groups_lists argument, as follows. Here we join the low and medium levels of BMRKR2 into a category one and compare with the high level labeled as category two.\n\nCodedf &lt;- extract_survival_biomarkers(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    biomarkers = c(\"BMRKR1\", \"AGE\"),\n    covariates = \"SEX\",\n    subgroups = \"BMRKR2\"\n  ),\n  data = adtte_f,\n  groups_list = list(\n    BMRKR2 = list(\n      one = c(\"LOW\", \"MEDIUM\"),\n      two = \"HIGH\"\n    )\n  )\n)\n\nresult &lt;- tabulate_survival_biomarkers(\n  df = df,\n  vars = c(\"n_tot_events\", \"n_tot\", \"median\", \"hr\", \"ci\"),\n  time_unit = adtte_f$AVALU[1]\n)\ng_forest(result, xlim = c(0.7, 1.4))\n\n\n\n\n\n\nFinally we can also specify stratification variables with the strata variable element, then the corresponding variables are used for stratification in the Cox proportional hazards models.\n\nCodedf &lt;- extract_survival_biomarkers(\n  variables = list(\n    tte = \"AVAL\",\n    is_event = \"is_event\",\n    biomarkers = c(\"BMRKR1\", \"AGE\"),\n    covariates = \"SEX\",\n    subgroups = \"BMRKR2\",\n    strata = c(\"STRATA1\", \"STRATA2\")\n  ),\n  data = adtte_f\n)\n\nresult &lt;- tabulate_survival_biomarkers(\n  df = df,\n  vars = c(\"n_tot_events\", \"n_tot\", \"median\", \"hr\", \"ci\"),\n  time_unit = adtte_f$AVALU[1]\n)\ng_forest(result, xlim = c(0.6, 1.4))\n\n\n\n\nNote that warnings might be issued if the model contains e.g. too few events in the resulting strata, in that case you might want to reduce the number of stratification variables.\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     stringr_1.5.0    \n[21] knitr_1.42        generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2\n[25] grid_4.2.2        tidyselect_1.2.0  glue_1.6.2        R6_2.5.1         \n[29] fansi_1.0.4       Rdpack_2.4        survival_3.5-5    rmarkdown_2.21   \n[33] carData_3.0-5     scda_0.1.6.9000   car_3.1-2         ggplot2_3.4.2    \n[37] purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19  splines_4.2.2    \n[41] backports_1.4.1   scales_1.2.1      htmltools_0.5.5   rbibutils_2.2.13 \n[45] abind_1.4-5       colorspace_2.1-0  utf8_1.2.3        stringi_1.7.12   \n[49] munsell_0.5.0     broom_1.0.4"
  },
  {
    "objectID": "graphs/dg02.html",
    "href": "graphs/dg02.html",
    "title": "DG2",
    "section": "",
    "text": "Setup\nStandard Plot\nSession Info\n\n\n\nThe graph below plots the distribution of a biomarker variable (on a continuous scale) as a boxplot by one or more categorical clinical variables with overlaid points.\nWe will use the synthetic_cdisc_data$adsl data set from the scda package to illustrate the graph and will select the biomarker evaluable population with BEP01FL. The column BMRKR1 contains the biomarker values on a continuous scale. We will use STRATA2 and ARM as categorical clinical variables.\n\nCodelibrary(tern)\nlibrary(ggplot2.utils)\nlibrary(dplyr)\n\nadsl &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adsl %&gt;%\n  df_explicit_na() %&gt;%\n  filter(BEP01FL == \"Y\")\n\n\n\n\nHere below the code for a simple boxplot with the outliers displayed. Note that you may run into warning messages after producing the graph if the variable you want to analyze contains NAs. To avoid these warning messages, you can use the drop_na() function from tidyr in the data manipulation step above to remove the NAs rows from the dataset (e.g drop_na(BMRKR1)).\n\nCodegraph &lt;- ggplot(adsl, aes(x = STRATA2, y = BMRKR1)) +\n  geom_boxplot() +\n  stat_boxplot(geom = \"errorbar\")\n\ngraph\n\n\n\n\nNow we overlay the original data points, and remove the display of the outliers to avoid duplicate points.\n\nCodegraph &lt;- ggplot(adsl, aes(x = STRATA2, y = BMRKR1)) +\n  geom_boxplot(outlier.shape = NA) +\n  stat_boxplot(geom = \"errorbar\") +\n  geom_point(\n    position = position_jitter(width = 0.2),\n    alpha = 1 / 4\n  )\n\ngraph\n\n\n\n\nWe can customize the labels of the axes.\n\nCodegraph +\n  scale_x_discrete(\n    breaks = c(\"S1\", \"S2\"),\n    labels = c(\"Stratum 1\", \"Stratum 2\"),\n    name = \"Strata\"\n  ) +\n  scale_y_continuous(name = \"Biomarker (Units)\")\n\n\n\n\nWe can add the group sizes as annotations.\n\nCodegraph +\n  stat_n_text(text.box = TRUE)\n\n\n\n\nWe can also display the biomarker by a further categorical variable with the facet_grid() layer.\n\nCodegraph +\n  facet_grid(. ~ ARM)\n\n\n\n\nThis example shows how to display the biomarker axis on a log scale.\n\nCodegraph +\n  scale_y_log10(name = \"Biomarker (Log(Units))\")\n\n\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           ggplot2.utils_0.2.1   ggplot2_3.4.2        \n[4] tern_0.8.1.9012       rtables_0.6.0.9004    magrittr_2.0.3       \n[7] formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   xfun_0.39          purrr_1.0.1        splines_4.2.2     \n [5] lattice_0.21-8     colorspace_2.1-0   vctrs_0.6.2        generics_0.1.3    \n [9] htmltools_0.5.5    yaml_2.3.7         utf8_1.2.3         survival_3.5-5    \n[13] rlang_1.1.1        pillar_1.9.0       glue_1.6.2         withr_2.5.0       \n[17] RColorBrewer_1.1-3 scda_0.1.6.9000    lifecycle_1.0.3    plyr_1.8.8        \n[21] munsell_0.5.0      gtable_0.3.3       htmlwidgets_1.6.2  codetools_0.2-19  \n[25] evaluate_0.21      labeling_0.4.2     knitr_1.42         GGally_2.1.2      \n[29] forcats_1.0.0      EnvStats_2.7.0     fastmap_1.1.1      fansi_1.0.4       \n[33] broom_1.0.4        Rcpp_1.0.10        ggpp_0.5.2         polynom_1.4-1     \n[37] scales_1.2.1       backports_1.4.1    checkmate_2.2.0    jsonlite_1.8.4    \n[41] farver_2.1.1       digest_0.6.31      rbibutils_2.2.13   grid_4.2.2        \n[45] Rdpack_2.4         cli_3.6.1          tools_4.2.2        tibble_3.2.1      \n[49] tidyr_1.3.0        pkgconfig_2.0.3    MASS_7.3-60        Matrix_1.5-4      \n[53] rmarkdown_2.21     reshape_0.8.9      R6_2.5.1           compiler_4.2.2"
  },
  {
    "objectID": "tables/dt01.html",
    "href": "tables/dt01.html",
    "title": "DT1",
    "section": "",
    "text": "Setup\nTable\nReorder Treatment Arms in Demographics Table (DT1A)\nCombine Treatment Arms in Demographics Table (DT1B)\nAlternative BEP Indicator in Demographics Table (DT1C)\nSession Info\n\n\n\nThe tables below compare the overall population (“All”) with the biomarker evaluable population (“BEP”) with regards to selected demographic variables.\nWe will use the synthetic_cdisc_data$adsl data set from the scda package to illustrate the tables. We add a second artificial BEP flag variable BEP02FL.\nIn order to compare All with BEP, we need to define a list bep_groups defining these two groups. The reason is that these two groups are overlapping (BEP is a subset of All). Here, we refer in the list elements to the levels Y and N of the biomarker population flag variable BEP01FL from adsl which we will use below:\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nset.seed(123)\nadsl &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adsl %&gt;%\n  df_explicit_na() %&gt;%\n  mutate(BEP02FL = factor(sample(c(\"Y\", \"N\"), size = n(), replace = TRUE)))\n\nbep_groups &lt;- list(\n  \"All\" = c(\"Y\", \"N\"),\n  \"BEP\" = \"Y\"\n)\n\n\nThis can then be used by the tern layout function split_cols_by_groups() below.\n\n\nThe simplest demographics table DT1 splits the columns by treatment arm and All vs. BEP, and summarizes selected demographic variables in the rows.\n\nCodelyt &lt;- basic_table() %&gt;%\n  split_cols_by(\"ARM\") %&gt;%\n  split_cols_by_groups(\"BEP01FL\", bep_groups) %&gt;%\n  summarize_vars(c(\"AGE\", \"SEX\")) %&gt;%\n  add_colcounts()\n\nbuild_table(lyt, adsl)\n\n                      A: Drug X                  B: Placebo                C: Combination      \n                  All           BEP           All           BEP           All           BEP    \n                (N=134)       (N=68)        (N=134)       (N=63)        (N=132)       (N=66)   \n———————————————————————————————————————————————————————————————————————————————————————————————\nAGE                                                                                            \n  n               134           68            134           63            132           66     \n  Mean (SD)   33.8 (6.6)    32.9 (6.6)    35.4 (7.9)    35.7 (8.3)    35.4 (7.7)    35.1 (8.1) \n  Median         33.0          32.0          35.0          35.0          35.0          34.0    \n  Min - Max   21.0 - 50.0   21.0 - 50.0   21.0 - 62.0   23.0 - 62.0   20.0 - 69.0   21.0 - 69.0\nSEX                                                                                            \n  n               134           68            134           63            132           66     \n  F            79 (59%)     44 (64.7%)    82 (61.2%)    42 (66.7%)     70 (53%)     40 (60.6%) \n  M            55 (41%)     24 (35.3%)    52 (38.8%)    21 (33.3%)     62 (47%)     26 (39.4%) \n\n\n\n\nWe can reorder the treatment arm columns in the demographics table DT1 by using the reorder_split_levels() splitting function in split_cols_by() as done here.\n\nCodelyt &lt;- basic_table() %&gt;%\n  split_cols_by(\"ARM\", split_fun = reorder_split_levels(c(\"B: Placebo\", \"A: Drug X\", \"C: Combination\"))) %&gt;%\n  split_cols_by_groups(\"BEP01FL\", bep_groups) %&gt;%\n  summarize_vars(c(\"AGE\", \"SEX\")) %&gt;%\n  add_colcounts()\n\nbuild_table(lyt, adsl)\n\n                     B: Placebo                   A: Drug X                C: Combination      \n                  All           BEP           All           BEP           All           BEP    \n                (N=134)       (N=63)        (N=134)       (N=68)        (N=132)       (N=66)   \n———————————————————————————————————————————————————————————————————————————————————————————————\nAGE                                                                                            \n  n               134           63            134           68            132           66     \n  Mean (SD)   35.4 (7.9)    35.7 (8.3)    33.8 (6.6)    32.9 (6.6)    35.4 (7.7)    35.1 (8.1) \n  Median         35.0          35.0          33.0          32.0          35.0          34.0    \n  Min - Max   21.0 - 62.0   23.0 - 62.0   21.0 - 50.0   21.0 - 50.0   20.0 - 69.0   21.0 - 69.0\nSEX                                                                                            \n  n               134           63            134           68            132           66     \n  F           82 (61.2%)    42 (66.7%)     79 (59%)     44 (64.7%)     70 (53%)     40 (60.6%) \n  M           52 (38.8%)    21 (33.3%)     55 (41%)     24 (35.3%)     62 (47%)     26 (39.4%) \n\n\n\n\nIt is simple to omit the treatment arm split in the demographics table DT1, thus effectively combining the treatment arms.\n\nCodelyt &lt;- basic_table() %&gt;%\n  split_cols_by_groups(\"BEP01FL\", bep_groups) %&gt;%\n  summarize_vars(c(\"AGE\", \"SEX\")) %&gt;%\n  add_colcounts()\n\nbuild_table(lyt, adsl)\n\n                  All           BEP    \n                (N=400)       (N=197)  \n———————————————————————————————————————\nAGE                                    \n  n               400           197    \n  Mean (SD)   34.9 (7.4)    34.6 (7.7) \n  Median         34.0          34.0    \n  Min - Max   20.0 - 69.0   21.0 - 69.0\nSEX                                    \n  n               400           197    \n  F           231 (57.8%)    126 (64%) \n  M           169 (42.2%)    71 (36%)  \n\n\n\n\nWe can of course use a different BEP factor variable BEP02FL with corresponding groups definition bep2_groups in the demographics table DT1.\n\nCodebep2_groups &lt;- list(\n  \"All\" = c(\"Y\", \"N\"),\n  \"BEP2\" = \"Y\"\n)\n\nlyt &lt;- basic_table() %&gt;%\n  split_cols_by(\"ARM\") %&gt;%\n  split_cols_by_groups(\"BEP02FL\", bep2_groups) %&gt;%\n  summarize_vars(c(\"AGE\", \"SEX\")) %&gt;%\n  add_colcounts()\n\nbuild_table(lyt, adsl)\n\n                      A: Drug X                  B: Placebo                C: Combination      \n                  All          BEP2           All          BEP2           All          BEP2    \n                (N=134)       (N=68)        (N=134)       (N=75)        (N=132)       (N=68)   \n———————————————————————————————————————————————————————————————————————————————————————————————\nAGE                                                                                            \n  n               134           68            134           75            132           68     \n  Mean (SD)   33.8 (6.6)    32.3 (6.2)    35.4 (7.9)    35.5 (7.4)    35.4 (7.7)    35.3 (6.7) \n  Median         33.0          31.0          35.0          36.0          35.0          35.0    \n  Min - Max   21.0 - 50.0   21.0 - 47.0   21.0 - 62.0   23.0 - 58.0   20.0 - 69.0   21.0 - 49.0\nSEX                                                                                            \n  n               134           68            134           75            132           68     \n  F            79 (59%)     42 (61.8%)    82 (61.2%)     48 (64%)      70 (53%)      34 (50%)  \n  M            55 (41%)     26 (38.2%)    52 (38.8%)     27 (36%)      62 (47%)      34 (50%)  \n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  },
  {
    "objectID": "tables/cmt01.html",
    "href": "tables/cmt01.html",
    "title": "CMT1",
    "section": "",
    "text": "Setup\nTable\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adtte data set from the scda package to illustrate the tables. We start by selecting the biomarker evaluable population (BEP) and the time-to-event endpoint of interest, here overall survival. We then convert time of overall survival to months and create a new variable for the event information.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\", BEP01FL == \"Y\") %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    event = 1 - CNSR\n  )\n\n\n\n\nThe summarize_coxreg() function in tern takes the same variables, at, and control arguments that are used to fit a model using the fit_coxreg_univar() function - specifying the time, event and covariate in a variables list, and control and at with any further customizations to the model. Note that the default confidence level is 95% but this can be customized via the conf_level element in control.\nRather than fitting the model and then tidying the output via the broom::tidy() function, we can directly input these three arguments into the summarize_coxreg() function to summarize the model fit in a table layout, building the table with our pre-processed adtte data set.\n\nCodelyt &lt;- basic_table() %&gt;%\n  summarize_coxreg(variables = list(\n    time = \"AVAL\",\n    event = \"event\",\n    covariates = \"COUNTRY\"\n  ))\n\nbuild_table(lyt, adtte)\n\n                              Hazard Ratio      95% CI      p-value\n———————————————————————————————————————————————————————————————————\nCovariate:                                                         \n  Country (reference = CHN)                                 0.8447 \n    USA                           1.36       (0.70, 2.64)   0.3633 \n    BRA                           1.02       (0.55, 1.87)   0.9564 \n    PAK                           1.03       (0.54, 1.94)   0.9316 \n    NGA                           0.97       (0.46, 2.03)   0.9405 \n    RUS                           1.48       (0.64, 3.42)   0.3574 \n    JPN                           1.52       (0.61, 3.76)   0.3686 \n    GBR                           0.75       (0.30, 1.85)   0.5287 \n    CAN                           2.09       (0.65, 6.70)   0.2163 \n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     stringr_1.5.0    \n[21] knitr_1.42        generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2\n[25] grid_4.2.2        tidyselect_1.2.0  glue_1.6.2        R6_2.5.1         \n[29] fansi_1.0.4       Rdpack_2.4        survival_3.5-5    rmarkdown_2.21   \n[33] carData_3.0-5     scda_0.1.6.9000   car_3.1-2         ggplot2_3.4.2    \n[37] purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19  splines_4.2.2    \n[41] backports_1.4.1   scales_1.2.1      htmltools_0.5.5   rbibutils_2.2.13 \n[45] abind_1.4-5       colorspace_2.1-0  utf8_1.2.3        stringi_1.7.12   \n[49] munsell_0.5.0     broom_1.0.4"
  },
  {
    "objectID": "tables/cmt03.html",
    "href": "tables/cmt03.html",
    "title": "CMT3",
    "section": "",
    "text": "Setup\nTable\nSession Info\n\n\n\nWe prepare the data in the same way as in CMT1.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\", BEP01FL == \"Y\") %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    event = 1 - CNSR\n  )\n\n\n\n\nThe separate Cox Proportional Hazards models for each covariate can be fitted and summarized in a table using the summarize_coxreg() function in tern. This function takes the same variables, at, and control arguments that are used to fit a model using the fit_coxreg_univar() function - specifying the time, event and covariate in a variables list, and control and at with any further customizations to the model. Note that the default confidence level is 95% but this can be customized via the conf_level element in control.\nWe input these three arguments into the summarize_coxreg() function to summarize the model fit in a table layout, and then build the table with our pre-processed adtte data set.\n\nCodelyt &lt;- basic_table() %&gt;%\n  summarize_coxreg(\n    variables = list(\n      time = \"AVAL\",\n      event = \"event\",\n      covariates = c(\"COUNTRY\", \"AGE\")\n    )\n  )\n\nbuild_table(lyt = lyt, df = adtte)\n\n                              Hazard Ratio      95% CI      p-value\n———————————————————————————————————————————————————————————————————\nCovariate:                                                         \n  Country (reference = CHN)                                 0.8447 \n    USA                           1.36       (0.70, 2.64)   0.3633 \n    BRA                           1.02       (0.55, 1.87)   0.9564 \n    PAK                           1.03       (0.54, 1.94)   0.9316 \n    NGA                           0.97       (0.46, 2.03)   0.9405 \n    RUS                           1.48       (0.64, 3.42)   0.3574 \n    JPN                           1.52       (0.61, 3.76)   0.3686 \n    GBR                           0.75       (0.30, 1.85)   0.5287 \n    CAN                           2.09       (0.65, 6.70)   0.2163 \n  Age                                                              \n    All                           1.01       (0.99, 1.03)   0.5869 \n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     stringr_1.5.0    \n[21] knitr_1.42        generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2\n[25] grid_4.2.2        tidyselect_1.2.0  glue_1.6.2        R6_2.5.1         \n[29] fansi_1.0.4       Rdpack_2.4        survival_3.5-5    rmarkdown_2.21   \n[33] carData_3.0-5     scda_0.1.6.9000   car_3.1-2         ggplot2_3.4.2    \n[37] purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19  splines_4.2.2    \n[41] backports_1.4.1   scales_1.2.1      htmltools_0.5.5   rbibutils_2.2.13 \n[45] abind_1.4-5       colorspace_2.1-0  utf8_1.2.3        stringi_1.7.12   \n[49] munsell_0.5.0     broom_1.0.4"
  },
  {
    "objectID": "tables/index.html",
    "href": "tables/index.html",
    "title": "",
    "section": "",
    "text": "Tables\nThis is a collection of Biomarker Analysis table templates."
  },
  {
    "objectID": "tables/tet01.html",
    "href": "tables/tet01.html",
    "title": "TET1",
    "section": "",
    "text": "Setup\nTable\nTime-to-Event Summary Table with Stratified Analysis (TET1A)\nSession Info\n\n\n\nWe will use the synthetic_cdisc_data$adtte data set from the scda package for the time-to-event summary table. We start by filtering the adtte data set for the overall survival observations, converting time of overall survival to months, creating new variables for event and non-event information and binarizing the ARM variable.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(\n    PARAMCD == \"OS\"\n  ) %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0,\n    is_not_event = CNSR == 1,\n    ARM_BIN = fct_collapse_only(\n      ARM,\n      CTRL = c(\"B: Placebo\"),\n      TRT = c(\"A: Drug X\", \"C: Combination\")\n    )\n  )\n\n\n\n\nThis time-to-event summary table splits the columns by treatment arm using split_cols_by(), creates a summary for patients with and without event using summarize_vars(), summarizes survival time using surv_time() and summarizes the analysis from unstratified Cox Proportional Hazards models using coxph_pairwise().\n\nCodelyt &lt;- basic_table() %&gt;%\n  split_cols_by(\n    var = \"ARM_BIN\",\n    ref_group = \"CTRL\"\n  ) %&gt;%\n  add_colcounts() %&gt;%\n  summarize_vars(\n    vars = \"is_event\",\n    .stats = \"count_fraction\",\n    .labels = c(count_fraction = \"Patients with event (%)\"),\n    nested = FALSE,\n    show_labels = \"hidden\"\n  ) %&gt;%\n  summarize_vars(\n    vars = \"is_not_event\",\n    .stats = \"count_fraction\",\n    .labels = c(count_fraction = \"Patients without event (%)\"),\n    nested = FALSE,\n    show_labels = \"hidden\"\n  ) %&gt;%\n  surv_time(\n    vars = \"AVAL\",\n    var_labels = \"Time to Event (months)\",\n    is_event = \"is_event\",\n    table_names = \"time_to_event\"\n  ) %&gt;%\n  coxph_pairwise(\n    vars = \"AVAL\",\n    is_event = \"is_event\",\n    var_labels = c(\"Unstratified Analysis\"),\n    control = control_coxph(pval_method = \"log-rank\"),\n    table_names = \"coxph_unstratified\"\n  )\n\nbuild_table(lyt, adtte)\n\n                                 CTRL           TRT     \n                               (N=134)        (N=266)   \n————————————————————————————————————————————————————————\nPatients with event (%)       87 (64.9%)    195 (73.3%) \nPatients without event (%)    47 (35.1%)     71 (26.7%) \nTime to Event (months)                                  \n  Median                         27.5           21.3    \n  95% CI                     (17.3, 30.2)   (16.3, 25.6)\n  25% and 75%-ile             9.5, 54.9      7.1, 50.9  \n  Range (censored)           0.9 to 91.0    0.3 to 154.7\n  Range (event)              0.0 to 122.4   0.1 to 116.4\nUnstratified Analysis                                   \n  p-value (log-rank)                           0.2146   \n  Hazard Ratio                                  1.17    \n  95% CI                                    (0.91, 1.51)\n\n\n\n\nWe can add the summary of an analysis with Cox Proportional Hazards models stratified by SEX to the table above using coxph_pairwise().\n\nCodelyt2 &lt;- lyt %&gt;%\n  coxph_pairwise(\n    vars = \"AVAL\",\n    is_event = \"is_event\",\n    var_labels = c(\"Stratified Analysis\"),\n    strat = \"SEX\",\n    control = control_coxph(pval_method = \"log-rank\"),\n    table_names = \"coxph_stratified\"\n  )\n\nbuild_table(lyt2, adtte)\n\n                                 CTRL           TRT     \n                               (N=134)        (N=266)   \n————————————————————————————————————————————————————————\nPatients with event (%)       87 (64.9%)    195 (73.3%) \nPatients without event (%)    47 (35.1%)     71 (26.7%) \nTime to Event (months)                                  \n  Median                         27.5           21.3    \n  95% CI                     (17.3, 30.2)   (16.3, 25.6)\n  25% and 75%-ile             9.5, 54.9      7.1, 50.9  \n  Range (censored)           0.9 to 91.0    0.3 to 154.7\n  Range (event)              0.0 to 122.4   0.1 to 116.4\nUnstratified Analysis                                   \n  p-value (log-rank)                           0.2146   \n  Hazard Ratio                                  1.17    \n  95% CI                                    (0.91, 1.51)\nStratified Analysis                                     \n  p-value (log-rank)                           0.2072   \n  Hazard Ratio                                  1.18    \n  95% CI                                    (0.91, 1.52)\n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  },
  {
    "objectID": "tables/cmt02.html",
    "href": "tables/cmt02.html",
    "title": "CMT2",
    "section": "",
    "text": "Setup\nTable\nChanging Reference Levels in the Cox Proportional Hazards Model Table (CMT2A)\nSession Info\n\n\n\nWe prepare the data similarly as in CMT1.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadtte &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %&gt;%\n  df_explicit_na() %&gt;%\n  filter(PARAMCD == \"OS\", BEP01FL == \"Y\") %&gt;%\n  mutate(\n    AVAL = day2month(AVAL),\n    AVALU = \"Months\",\n    is_event = CNSR == 0\n  ) %&gt;%\n  var_relabel(\n    BMRKR1 = \"Biomarker (Continuous)\",\n    BMRKR2 = \"Biomarker (Categorical)\"\n  )\n\n\n\n\nThe multivariate Cox Proportional Hazards model can be displayed in a summary table using the summarize_coxreg function from tern with the multivar argument set to TRUE. Like the corresponding model fitting function fit_coxreg_multivar(), we specify the time, event, arm and covariates in a variables list, and any further customizations via the control argument. Note that the default confidence level is 95% but this can be customized via the conf_level element in control.\nRather than fitting the model and then tidying the output via the broom::tidy() function, we can directly input these three arguments into the summarize_coxreg() function to summarize the model fit in a table layout, building the table with our pre-processed adtte data set.\n\nCoderesult &lt;- basic_table() %&gt;%\n  summarize_coxreg(\n    variables = list(\n      time = \"AVAL\",\n      event = \"is_event\",\n      arm = \"ARM\",\n      covariates = c(\"AGE\", \"BMRKR1\", \"BMRKR2\")\n    ),\n    multivar = TRUE\n  ) %&gt;%\n  append_topleft(\"Effect/Covariate Included in the Model\") %&gt;%\n  build_table(adtte)\n\nresult\n\nEffect/Covariate Included in the Model                 Hazard Ratio      95% CI      p-value\n————————————————————————————————————————————————————————————————————————————————————————————\nTreatment:                                                                                  \n  Description of Planned Arm (reference = A: Drug X)                                 &lt;0.0001\n    B: Placebo                                             1.49       (0.92, 2.40)   0.1037 \n    C: Combination                                         3.91       (2.53, 6.04)   &lt;0.0001\nCovariate:                                                                                  \n  Age                                                                                       \n    All                                                    1.00       (0.99, 1.02)   0.6236 \n  Biomarker (Continuous)                                                                    \n    All                                                    0.98       (0.93, 1.02)   0.3023 \n  Biomarker (Categorical) (reference = LOW)                                          0.6704 \n    MEDIUM                                                 1.00       (0.65, 1.53)   0.9909 \n    HIGH                                                   0.84       (0.56, 1.28)   0.4211 \n\n\n\n\nFor changing the reference levels, for example to use placebo as reference for a treatment arm variable, we can just reorder the levels of the corresponding factor variables, and pass the resulting dataset to the model fitting function as before. The forcats package provides convenience functions for the level reordering.\n\nCodeadtte2 &lt;- adtte %&gt;%\n  mutate(\n    ARM = forcats::fct_relevel(\n      ARM,\n      \"B: Placebo\",\n      \"C: Combination\",\n      \"A: Drug X\"\n    )\n  )\n\n\nNow we can proceed in the same way as in CMT2 above.\n\nCoderesult &lt;- basic_table() %&gt;%\n  summarize_coxreg(\n    variables = list(\n      time = \"AVAL\",\n      event = \"is_event\",\n      arm = \"ARM\",\n      covariates = c(\"AGE\", \"BMRKR1\", \"BMRKR2\")\n    ),\n    multivar = TRUE\n  ) %&gt;%\n  append_topleft(\"Effect/Covariate Included in the Model\") %&gt;%\n  build_table(adtte2)\n\nresult\n\nEffect/Covariate Included in the Model                  Hazard Ratio      95% CI      p-value\n—————————————————————————————————————————————————————————————————————————————————————————————\nTreatment:                                                                                   \n  Description of Planned Arm (reference = B: Placebo)                                 &lt;0.0001\n    C: Combination                                          2.63       (1.70, 4.05)   &lt;0.0001\n    A: Drug X                                               0.67       (0.42, 1.08)   0.1037 \nCovariate:                                                                                   \n  Age                                                                                        \n    All                                                     1.00       (0.99, 1.02)   0.6236 \n  Biomarker (Continuous)                                                                     \n    All                                                     0.98       (0.93, 1.02)   0.3023 \n  Biomarker (Categorical) (reference = LOW)                                           0.6704 \n    MEDIUM                                                  1.00       (0.65, 1.53)   0.9909 \n    HIGH                                                    0.84       (0.56, 1.28)   0.4211 \n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     stringr_1.5.0    \n[21] knitr_1.42        generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2\n[25] grid_4.2.2        tidyselect_1.2.0  glue_1.6.2        R6_2.5.1         \n[29] fansi_1.0.4       Rdpack_2.4        survival_3.5-5    rmarkdown_2.21   \n[33] carData_3.0-5     scda_0.1.6.9000   car_3.1-2         ggplot2_3.4.2    \n[37] purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19  splines_4.2.2    \n[41] backports_1.4.1   scales_1.2.1      htmltools_0.5.5   rbibutils_2.2.13 \n[45] abind_1.4-5       colorspace_2.1-0  utf8_1.2.3        stringi_1.7.12   \n[49] munsell_0.5.0     broom_1.0.4"
  },
  {
    "objectID": "tables/dt02.html",
    "href": "tables/dt02.html",
    "title": "DT2",
    "section": "",
    "text": "Setup\nTable\nDemographics Table Allowing Testing to Compare Demographic Variables Between Non-BEP vs. BEP population (DT2A)\nSession Info\n\n\n\nThe tables below compare the biomarker evaluable population (BEP, below in the table “BEP Yes”) with the remainder non-BEP (“BEP No”) within each treatment arm with regards to selected demographic variables.\nWe will use the synthetic_cdisc_data$adsl data set from the scda package to illustrate the tables.\nIn order to compare the BEP with the non-BEP, we only need to split columns on the BEP flag variable BEP01FL that categorises the evaluable and non evaluable subgroups. For readability in the tables, we define a separate label variable BEP_label below which is parallel to the original flag variable.\n\nCodelibrary(tern)\nlibrary(dplyr)\n\nadsl &lt;- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adsl %&gt;%\n  df_explicit_na() %&gt;%\n  mutate(\n    BEP_label = case_when(\n      BEP01FL == \"Y\" ~ \"BEP Yes\",\n      BEP01FL == \"N\" ~ \"BEP No\"\n    )\n  )\n\n\nThis can then be used by the rtables layout function split_cols_by() below.\n\n\nThe demographics table DT2 splits the columns by treatment arm and by the biomarker population (Yes vs. No), and summarizes selected demographic variables in the rows. You can see here how we use the separate labels variable to specify the labels used in the column headers.\n\nCodelyt &lt;- basic_table() %&gt;%\n  split_cols_by(\"ARM\") %&gt;%\n  add_colcounts() %&gt;%\n  split_cols_by(\"BEP01FL\", labels_var = \"BEP_label\") %&gt;%\n  summarize_vars(c(\"AGE\", \"SEX\"))\n\nbuild_table(lyt, adsl)\n\n                      A: Drug X                  B: Placebo                C: Combination      \n                BEP Yes       BEP No        BEP Yes       BEP No        BEP Yes       BEP No   \n                (N=68)        (N=66)        (N=63)        (N=71)        (N=66)        (N=66)   \n———————————————————————————————————————————————————————————————————————————————————————————————\nAGE                                                                                            \n  n               68            66            63            71            66            66     \n  Mean (SD)   32.9 (6.6)    34.6 (6.5)    35.7 (8.3)    35.2 (7.6)    35.1 (8.1)    35.8 (7.3) \n  Median         32.0          34.0          35.0          35.0          34.0          35.0    \n  Min - Max   21.0 - 50.0   24.0 - 48.0   23.0 - 62.0   21.0 - 58.0   21.0 - 69.0   20.0 - 64.0\nSEX                                                                                            \n  n               68            66            63            71            66            66     \n  F           44 (64.7%)     35 (53%)     42 (66.7%)    40 (56.3%)    40 (60.6%)    30 (45.5%) \n  M           24 (35.3%)     31 (47%)     21 (33.3%)    31 (43.7%)    26 (39.4%)    36 (54.5%) \n\n\n\n\nThe demographics table DT2A splits the columns by treatment arm and by BEP vs. non-BEP, summarizes selected demographic variables in the rows and performs tests to compare demographic variables between Non-BEP vs. BEP population. Note that p-values can be NA when the test could not be performed due to row counts being all zero, e.g.\n\nCodelyt &lt;- basic_table() %&gt;%\n  split_cols_by(\"ARM\") %&gt;%\n  add_colcounts() %&gt;%\n  split_cols_by(\"BEP01FL\", labels_var = \"BEP_label\", ref_group = \"Y\") %&gt;%\n  compare_vars(c(\"AGE\", \"SEX\"))\n\nbuild_table(lyt, adsl)\n\n                                      A: Drug X                B: Placebo              C: Combination     \n                                BEP Yes       BEP No      BEP Yes       BEP No      BEP Yes       BEP No  \n                                 (N=68)       (N=66)       (N=63)       (N=71)       (N=66)       (N=66)  \n——————————————————————————————————————————————————————————————————————————————————————————————————————————\nAGE                                                                                                       \n  n                                68           66           63           71           66           66    \n  Mean (SD)                    32.9 (6.6)   34.6 (6.5)   35.7 (8.3)   35.2 (7.6)   35.1 (8.1)   35.8 (7.3)\n  p-value (t-test)                            0.1384                    0.6846                    0.6139  \nSEX                                                                                                       \n  n                                68           66           63           71           66           66    \n  F                            44 (64.7%)    35 (53%)    42 (66.7%)   40 (56.3%)   40 (60.6%)   30 (45.5%)\n  M                            24 (35.3%)    31 (47%)    21 (33.3%)   31 (43.7%)   26 (39.4%)   36 (54.5%)\n  p-value (chi-squared test)                  0.2309                    0.2951                    0.1165  \n\n\n\n\n\nCodesessionInfo()\n\nR version 4.2.2 (2022-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] dplyr_1.1.2           tern_0.8.1.9012       rtables_0.6.0.9004   \n[4] magrittr_2.0.3        formatters_0.4.1.9003\n\nloaded via a namespace (and not attached):\n [1] compiler_4.2.2    pillar_1.9.0      forcats_1.0.0     tools_4.2.2      \n [5] digest_0.6.31     lattice_0.21-8    jsonlite_1.8.4    evaluate_0.21    \n [9] lifecycle_1.0.3   tibble_3.2.1      gtable_0.3.3      checkmate_2.2.0  \n[13] pkgconfig_2.0.3   rlang_1.1.1       Matrix_1.5-4      cli_3.6.1        \n[17] yaml_2.3.7        xfun_0.39         fastmap_1.1.1     knitr_1.42       \n[21] generics_0.1.3    vctrs_0.6.2       htmlwidgets_1.6.2 grid_4.2.2       \n[25] tidyselect_1.2.0  glue_1.6.2        R6_2.5.1          fansi_1.0.4      \n[29] Rdpack_2.4        survival_3.5-5    rmarkdown_2.21    scda_0.1.6.9000  \n[33] ggplot2_3.4.2     purrr_1.0.1       tidyr_1.3.0       codetools_0.2-19 \n[37] splines_4.2.2     backports_1.4.1   scales_1.2.1      htmltools_0.5.5  \n[41] rbibutils_2.2.13  colorspace_2.1-0  utf8_1.2.3        munsell_0.5.0    \n[45] broom_1.0.4"
  }
]