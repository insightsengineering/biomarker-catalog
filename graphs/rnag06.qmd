---
title: RNAG6
subtitle: RNAseq Barplot
categories: [RNAG]
---

------------------------------------------------------------------------

::: panel-tabset
## Setup: Import, Filter and Normalize

This page can be used as a template of how to use the available `hermes` functions to produce a barplot of the dichotomized gene expression counts into two or three categories based on custom defined percentiles.

The `draw_barplot()` function used below needs `HermesData` as input.
See [RNAG1](../graphs/rnag01.qmd) for details on how to import, filter and normalize `HermesData`.

```{r, message = FALSE}
library(hermes)
object <- hermes_data %>%
  add_quality_flags() %>%
  filter() %>%
  normalize()
```

## Barplot for a Single Gene

We can create a barplot for gene expression counts of single genes by specifying a gene in the `gene_spec` (gene specification) as follows.
This function creates a scatterplot with the default percentiles (0.33, 0.67), to specify custom percentiles, please use the `percentile` argument.

```{r}
draw_barplot(
  object = object,
  assay_name = "counts",
  x_spec = gene_spec(genes(object)[1])
)
```

## Barplot for Gene Signatures

We can also specify a gene summary function for multiple genes, thereby using the corresponding gene signature.
Note that here we just want to use the first 3 genes from the `object` without explicitly specifying the gene IDs, and this can be done through the `genes()` function in `hermes`.

```{r}
draw_barplot(
  object = object,
  assay_name = "counts",
  x_spec = gene_spec(
    genes(object)[1:3],
    fun = colMeans,
    fun_name = "Median"
  )
)
```

## Additional Options for Customization

It is also possible to pass additional arguments to the function `draw_barplot()`, ex.
if we wish to specify an optional faceting variable or optional fill variable.
See `?hermes::draw_barplot()` for details about the additional parameters available.

```{r}
draw_barplot(
  object = object,
  assay_name = "counts",
  x_spec = gene_spec(
    genes(object)[1:3],
    fun = colMeans,
    fun_name = "Median"
  ),
  facet_var = "SEX",
  fill_var = "AGE18"
)
```

```{r}
draw_barplot(
  object = object,
  assay_name = "counts",
  x_spec = gene_spec(
    genes(object)[1:3],
    fun = colMeans,
    fun_name = "Median"
  ),
  facet_var = "SEX",
  fill_var = "AGE18",
  percentiles = c(0.1, 0.9)
)
```

## Teal Module for Barplot

We start by importing a `MultiAssayExperiment`; here we use the example `multi_assay_experiment` available in `hermes`.
It is wrapped as a `teal::dataset`.
We can then use the provided teal module `tm_g_barplot` to have add a barplot module in our teal app.

```{r,  message = FALSE, cache = FALSE}
#| screenshot.opts = list(delay = 24)
library(teal.modules.hermes)
mae <- hermes::multi_assay_experiment
mae_data <- dataset("MAE", mae)
data <- teal_data(mae_data)

app <- init(
  data = data,
  modules = modules(
    tm_g_barplot(
      label = "barplot",
      mae_name = "MAE"
    )
  )
)
shinyApp(app$ui, app$server)
```

{{< include ../misc/session_info.qmd >}}
:::
